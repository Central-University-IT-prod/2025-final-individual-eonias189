// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	models "advertising/advertising-service/internal/models"
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// StatsRepo is an autogenerated mock type for the StatsRepo type
type StatsRepo struct {
	mock.Mock
}

// GetStatsForAdvertiser provides a mock function with given fields: ctx, advertiserId
func (_m *StatsRepo) GetStatsForAdvertiser(ctx context.Context, advertiserId uuid.UUID) (models.Stats, error) {
	ret := _m.Called(ctx, advertiserId)

	if len(ret) == 0 {
		panic("no return value specified for GetStatsForAdvertiser")
	}

	var r0 models.Stats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (models.Stats, error)); ok {
		return rf(ctx, advertiserId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) models.Stats); ok {
		r0 = rf(ctx, advertiserId)
	} else {
		r0 = ret.Get(0).(models.Stats)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, advertiserId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatsForAdvertiserDaily provides a mock function with given fields: ctx, advertiserId
func (_m *StatsRepo) GetStatsForAdvertiserDaily(ctx context.Context, advertiserId uuid.UUID) ([]models.StatsDaily, error) {
	ret := _m.Called(ctx, advertiserId)

	if len(ret) == 0 {
		panic("no return value specified for GetStatsForAdvertiserDaily")
	}

	var r0 []models.StatsDaily
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.StatsDaily, error)); ok {
		return rf(ctx, advertiserId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.StatsDaily); ok {
		r0 = rf(ctx, advertiserId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.StatsDaily)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, advertiserId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatsForCampaign provides a mock function with given fields: ctx, campaignId
func (_m *StatsRepo) GetStatsForCampaign(ctx context.Context, campaignId uuid.UUID) (models.Stats, error) {
	ret := _m.Called(ctx, campaignId)

	if len(ret) == 0 {
		panic("no return value specified for GetStatsForCampaign")
	}

	var r0 models.Stats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (models.Stats, error)); ok {
		return rf(ctx, campaignId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) models.Stats); ok {
		r0 = rf(ctx, campaignId)
	} else {
		r0 = ret.Get(0).(models.Stats)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, campaignId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatsForCampaignDaily provides a mock function with given fields: ctx, campaignId
func (_m *StatsRepo) GetStatsForCampaignDaily(ctx context.Context, campaignId uuid.UUID) ([]models.StatsDaily, error) {
	ret := _m.Called(ctx, campaignId)

	if len(ret) == 0 {
		panic("no return value specified for GetStatsForCampaignDaily")
	}

	var r0 []models.StatsDaily
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.StatsDaily, error)); ok {
		return rf(ctx, campaignId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.StatsDaily); ok {
		r0 = rf(ctx, campaignId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.StatsDaily)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, campaignId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStatsRepo creates a new instance of StatsRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStatsRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *StatsRepo {
	mock := &StatsRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
