// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
	"net/http"

	"github.com/go-faster/errors"

	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
)

type codeRecorder struct {
	http.ResponseWriter
	status int
}

func (c *codeRecorder) WriteHeader(status int) {
	c.status = status
	c.ResponseWriter.WriteHeader(status)
}

func recordError(string, error) {}

// handleAdvanceDayRequest handles advanceDay operation.
//
// Устанавливает текущий день в системе в заданную дату.
//
// POST /time/advance
func (s *Server) handleAdvanceDayRequest(args [0]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	statusWriter := &codeRecorder{ResponseWriter: w}
	w = statusWriter
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: AdvanceDayOperation,
			ID:   "advanceDay",
		}
	)
	request, close, err := s.decodeAdvanceDayRequest(r)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeRequest", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	defer func() {
		if err := close(); err != nil {
			recordError("CloseRequest", err)
		}
	}()

	var response AdvanceDayRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    AdvanceDayOperation,
			OperationSummary: "Установка текущей даты",
			OperationID:      "advanceDay",
			Body:             request,
			Params:           middleware.Parameters{},
			Raw:              r,
		}

		type (
			Request  = OptAdvanceDayReq
			Params   = struct{}
			Response = AdvanceDayRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			nil,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.AdvanceDay(ctx, request)
				return response, err
			},
		)
	} else {
		response, err = s.h.AdvanceDay(ctx, request)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeAdvanceDayResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleCreateCampaignRequest handles createCampaign operation.
//
// Создаёт новую рекламную кампанию для указанного
// рекламодателя.
//
// POST /advertisers/{advertiserId}/campaigns
func (s *Server) handleCreateCampaignRequest(args [1]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	statusWriter := &codeRecorder{ResponseWriter: w}
	w = statusWriter
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: CreateCampaignOperation,
			ID:   "createCampaign",
		}
	)
	params, err := decodeCreateCampaignParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	request, close, err := s.decodeCreateCampaignRequest(r)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeRequest", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	defer func() {
		if err := close(); err != nil {
			recordError("CloseRequest", err)
		}
	}()

	var response CreateCampaignRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    CreateCampaignOperation,
			OperationSummary: "Создание рекламной кампании",
			OperationID:      "createCampaign",
			Body:             request,
			Params: middleware.Parameters{
				{
					Name: "advertiserId",
					In:   "path",
				}: params.AdvertiserId,
			},
			Raw: r,
		}

		type (
			Request  = *CampaignCreate
			Params   = CreateCampaignParams
			Response = CreateCampaignRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackCreateCampaignParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.CreateCampaign(ctx, request, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.CreateCampaign(ctx, request, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeCreateCampaignResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleDeleteCampaignRequest handles deleteCampaign operation.
//
// Удаляет рекламную кампанию рекламодателя по
// заданному campaignId.
//
// DELETE /advertisers/{advertiserId}/campaigns/{campaignId}
func (s *Server) handleDeleteCampaignRequest(args [2]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	statusWriter := &codeRecorder{ResponseWriter: w}
	w = statusWriter
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: DeleteCampaignOperation,
			ID:   "deleteCampaign",
		}
	)
	params, err := decodeDeleteCampaignParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response DeleteCampaignRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    DeleteCampaignOperation,
			OperationSummary: "Удаление рекламной кампании",
			OperationID:      "deleteCampaign",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "advertiserId",
					In:   "path",
				}: params.AdvertiserId,
				{
					Name: "campaignId",
					In:   "path",
				}: params.CampaignId,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = DeleteCampaignParams
			Response = DeleteCampaignRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackDeleteCampaignParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.DeleteCampaign(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.DeleteCampaign(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeDeleteCampaignResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGenerateAdTextRequest handles generateAdText operation.
//
// Генерирует текст рекламного объявления.
//
// POST /ai/generate-ad-text
func (s *Server) handleGenerateAdTextRequest(args [0]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	statusWriter := &codeRecorder{ResponseWriter: w}
	w = statusWriter
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: GenerateAdTextOperation,
			ID:   "generateAdText",
		}
	)
	request, close, err := s.decodeGenerateAdTextRequest(r)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeRequest", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	defer func() {
		if err := close(); err != nil {
			recordError("CloseRequest", err)
		}
	}()

	var response GenerateAdTextRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    GenerateAdTextOperation,
			OperationSummary: "Генерация текста рекламного объявления",
			OperationID:      "generateAdText",
			Body:             request,
			Params:           middleware.Parameters{},
			Raw:              r,
		}

		type (
			Request  = *GenerateAdTextReq
			Params   = struct{}
			Response = GenerateAdTextRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			nil,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GenerateAdText(ctx, request)
				return response, err
			},
		)
	} else {
		response, err = s.h.GenerateAdText(ctx, request)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGenerateAdTextResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetAdForClientRequest handles getAdForClient operation.
//
// Возвращает рекламное объявление, подходящее для
// показа клиенту с учетом таргетинга и ML скора.
//
// GET /ads
func (s *Server) handleGetAdForClientRequest(args [0]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	statusWriter := &codeRecorder{ResponseWriter: w}
	w = statusWriter
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: GetAdForClientOperation,
			ID:   "getAdForClient",
		}
	)
	params, err := decodeGetAdForClientParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetAdForClientRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    GetAdForClientOperation,
			OperationSummary: "Получение рекламного объявления для клиента",
			OperationID:      "getAdForClient",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "client_id",
					In:   "query",
				}: params.ClientID,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetAdForClientParams
			Response = GetAdForClientRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetAdForClientParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetAdForClient(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetAdForClient(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetAdForClientResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetAdvertiserByIdRequest handles getAdvertiserById operation.
//
// Возвращает информацию о рекламодателе по его ID.
//
// GET /advertisers/{advertiserId}
func (s *Server) handleGetAdvertiserByIdRequest(args [1]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	statusWriter := &codeRecorder{ResponseWriter: w}
	w = statusWriter
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: GetAdvertiserByIdOperation,
			ID:   "getAdvertiserById",
		}
	)
	params, err := decodeGetAdvertiserByIdParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetAdvertiserByIdRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    GetAdvertiserByIdOperation,
			OperationSummary: "Получение рекламодателя по ID",
			OperationID:      "getAdvertiserById",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "advertiserId",
					In:   "path",
				}: params.AdvertiserId,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetAdvertiserByIdParams
			Response = GetAdvertiserByIdRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetAdvertiserByIdParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetAdvertiserById(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetAdvertiserById(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetAdvertiserByIdResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetAdvertiserCampaignsStatsRequest handles getAdvertiserCampaignsStats operation.
//
// Возвращает сводную статистику по всем рекламным
// кампаниям, принадлежащим заданному рекламодателю.
//
// GET /stats/advertisers/{advertiserId}/campaigns
func (s *Server) handleGetAdvertiserCampaignsStatsRequest(args [1]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	statusWriter := &codeRecorder{ResponseWriter: w}
	w = statusWriter
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: GetAdvertiserCampaignsStatsOperation,
			ID:   "getAdvertiserCampaignsStats",
		}
	)
	params, err := decodeGetAdvertiserCampaignsStatsParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetAdvertiserCampaignsStatsRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    GetAdvertiserCampaignsStatsOperation,
			OperationSummary: "Получение агрегированной статистики по всем кампаниям рекламодателя",
			OperationID:      "getAdvertiserCampaignsStats",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "advertiserId",
					In:   "path",
				}: params.AdvertiserId,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetAdvertiserCampaignsStatsParams
			Response = GetAdvertiserCampaignsStatsRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetAdvertiserCampaignsStatsParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetAdvertiserCampaignsStats(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetAdvertiserCampaignsStats(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetAdvertiserCampaignsStatsResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetAdvertiserDailyStatsRequest handles getAdvertiserDailyStats operation.
//
// Возвращает массив ежедневной сводной статистики по
// всем рекламным кампаниям заданного рекламодателя.
//
// GET /stats/advertisers/{advertiserId}/campaigns/daily
func (s *Server) handleGetAdvertiserDailyStatsRequest(args [1]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	statusWriter := &codeRecorder{ResponseWriter: w}
	w = statusWriter
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: GetAdvertiserDailyStatsOperation,
			ID:   "getAdvertiserDailyStats",
		}
	)
	params, err := decodeGetAdvertiserDailyStatsParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetAdvertiserDailyStatsRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    GetAdvertiserDailyStatsOperation,
			OperationSummary: "Получение ежедневной агрегированной статистики по всем кампаниям рекламодателя",
			OperationID:      "getAdvertiserDailyStats",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "advertiserId",
					In:   "path",
				}: params.AdvertiserId,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetAdvertiserDailyStatsParams
			Response = GetAdvertiserDailyStatsRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetAdvertiserDailyStatsParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetAdvertiserDailyStats(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetAdvertiserDailyStats(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetAdvertiserDailyStatsResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetCampaignRequest handles getCampaign operation.
//
// Получение кампании по ID.
//
// GET /advertisers/{advertiserId}/campaigns/{campaignId}
func (s *Server) handleGetCampaignRequest(args [2]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	statusWriter := &codeRecorder{ResponseWriter: w}
	w = statusWriter
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: GetCampaignOperation,
			ID:   "getCampaign",
		}
	)
	params, err := decodeGetCampaignParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetCampaignRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    GetCampaignOperation,
			OperationSummary: "Получение кампании по ID",
			OperationID:      "getCampaign",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "advertiserId",
					In:   "path",
				}: params.AdvertiserId,
				{
					Name: "campaignId",
					In:   "path",
				}: params.CampaignId,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetCampaignParams
			Response = GetCampaignRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetCampaignParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetCampaign(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetCampaign(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetCampaignResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetCampaignDailyStatsRequest handles getCampaignDailyStats operation.
//
// Возвращает массив ежедневной статистики для
// указанной рекламной кампании.
//
// GET /stats/campaigns/{campaignId}/daily
func (s *Server) handleGetCampaignDailyStatsRequest(args [1]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	statusWriter := &codeRecorder{ResponseWriter: w}
	w = statusWriter
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: GetCampaignDailyStatsOperation,
			ID:   "getCampaignDailyStats",
		}
	)
	params, err := decodeGetCampaignDailyStatsParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetCampaignDailyStatsRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    GetCampaignDailyStatsOperation,
			OperationSummary: "Получение ежедневной статистики по рекламной кампании",
			OperationID:      "getCampaignDailyStats",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "campaignId",
					In:   "path",
				}: params.CampaignId,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetCampaignDailyStatsParams
			Response = GetCampaignDailyStatsRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetCampaignDailyStatsParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetCampaignDailyStats(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetCampaignDailyStats(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetCampaignDailyStatsResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetCampaignStatsRequest handles getCampaignStats operation.
//
// Возвращает агрегированную статистику (показы,
// переходы, затраты и конверсию) для заданной рекламной
// кампании.
//
// GET /stats/campaigns/{campaignId}
func (s *Server) handleGetCampaignStatsRequest(args [1]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	statusWriter := &codeRecorder{ResponseWriter: w}
	w = statusWriter
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: GetCampaignStatsOperation,
			ID:   "getCampaignStats",
		}
	)
	params, err := decodeGetCampaignStatsParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetCampaignStatsRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    GetCampaignStatsOperation,
			OperationSummary: "Получение статистики по рекламной кампании",
			OperationID:      "getCampaignStats",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "campaignId",
					In:   "path",
				}: params.CampaignId,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetCampaignStatsParams
			Response = GetCampaignStatsRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetCampaignStatsParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetCampaignStats(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetCampaignStats(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetCampaignStatsResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleGetClientByIdRequest handles getClientById operation.
//
// Возвращает информацию о клиенте по его ID.
//
// GET /clients/{clientId}
func (s *Server) handleGetClientByIdRequest(args [1]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	statusWriter := &codeRecorder{ResponseWriter: w}
	w = statusWriter
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: GetClientByIdOperation,
			ID:   "getClientById",
		}
	)
	params, err := decodeGetClientByIdParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response GetClientByIdRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    GetClientByIdOperation,
			OperationSummary: "Получение клиента по ID",
			OperationID:      "getClientById",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "clientId",
					In:   "path",
				}: params.ClientId,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = GetClientByIdParams
			Response = GetClientByIdRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackGetClientByIdParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.GetClientById(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.GetClientById(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeGetClientByIdResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleListCampaignsRequest handles listCampaigns operation.
//
// Возвращает список рекламных кампаний для указанного
// рекламодателя с пагинацией.
//
// GET /advertisers/{advertiserId}/campaigns
func (s *Server) handleListCampaignsRequest(args [1]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	statusWriter := &codeRecorder{ResponseWriter: w}
	w = statusWriter
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: ListCampaignsOperation,
			ID:   "listCampaigns",
		}
	)
	params, err := decodeListCampaignsParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response ListCampaignsRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    ListCampaignsOperation,
			OperationSummary: "Получение рекламных кампаний рекламодателя c пагинацией",
			OperationID:      "listCampaigns",
			Body:             nil,
			Params: middleware.Parameters{
				{
					Name: "advertiserId",
					In:   "path",
				}: params.AdvertiserId,
				{
					Name: "size",
					In:   "query",
				}: params.Size,
				{
					Name: "page",
					In:   "query",
				}: params.Page,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = ListCampaignsParams
			Response = ListCampaignsRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackListCampaignsParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.ListCampaigns(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.ListCampaigns(ctx, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeListCampaignsResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleModerateAdTextRequest handles moderateAdText operation.
//
// Модерирует текст рекламного объявления.
//
// POST /ai/moderate-ad-text
func (s *Server) handleModerateAdTextRequest(args [0]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	statusWriter := &codeRecorder{ResponseWriter: w}
	w = statusWriter
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: ModerateAdTextOperation,
			ID:   "moderateAdText",
		}
	)
	request, close, err := s.decodeModerateAdTextRequest(r)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeRequest", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	defer func() {
		if err := close(); err != nil {
			recordError("CloseRequest", err)
		}
	}()

	var response ModerateAdTextRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    ModerateAdTextOperation,
			OperationSummary: "Модерация текста рекламного объявления",
			OperationID:      "moderateAdText",
			Body:             request,
			Params:           middleware.Parameters{},
			Raw:              r,
		}

		type (
			Request  = *ModerateAdTextReq
			Params   = struct{}
			Response = ModerateAdTextRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			nil,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.ModerateAdText(ctx, request)
				return response, err
			},
		)
	} else {
		response, err = s.h.ModerateAdText(ctx, request)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeModerateAdTextResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleRecordAdClickRequest handles recordAdClick operation.
//
// Фиксирует клик (переход) клиента по рекламному
// объявлению.
//
// POST /ads/{adId}/click
func (s *Server) handleRecordAdClickRequest(args [1]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	statusWriter := &codeRecorder{ResponseWriter: w}
	w = statusWriter
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: RecordAdClickOperation,
			ID:   "recordAdClick",
		}
	)
	params, err := decodeRecordAdClickParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	request, close, err := s.decodeRecordAdClickRequest(r)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeRequest", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	defer func() {
		if err := close(); err != nil {
			recordError("CloseRequest", err)
		}
	}()

	var response RecordAdClickRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    RecordAdClickOperation,
			OperationSummary: "Фиксация перехода по рекламному объявлению",
			OperationID:      "recordAdClick",
			Body:             request,
			Params: middleware.Parameters{
				{
					Name: "adId",
					In:   "path",
				}: params.AdId,
			},
			Raw: r,
		}

		type (
			Request  = *RecordAdClickReq
			Params   = RecordAdClickParams
			Response = RecordAdClickRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackRecordAdClickParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.RecordAdClick(ctx, request, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.RecordAdClick(ctx, request, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeRecordAdClickResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleUpdateCampaignRequest handles updateCampaign operation.
//
// Обновляет разрешённые параметры рекламной кампании
// до её старта.
//
// PUT /advertisers/{advertiserId}/campaigns/{campaignId}
func (s *Server) handleUpdateCampaignRequest(args [2]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	statusWriter := &codeRecorder{ResponseWriter: w}
	w = statusWriter
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: UpdateCampaignOperation,
			ID:   "updateCampaign",
		}
	)
	params, err := decodeUpdateCampaignParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	request, close, err := s.decodeUpdateCampaignRequest(r)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeRequest", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	defer func() {
		if err := close(); err != nil {
			recordError("CloseRequest", err)
		}
	}()

	var response UpdateCampaignRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    UpdateCampaignOperation,
			OperationSummary: "Обновление рекламной кампании",
			OperationID:      "updateCampaign",
			Body:             request,
			Params: middleware.Parameters{
				{
					Name: "advertiserId",
					In:   "path",
				}: params.AdvertiserId,
				{
					Name: "campaignId",
					In:   "path",
				}: params.CampaignId,
			},
			Raw: r,
		}

		type (
			Request  = *CampaignUpdate
			Params   = UpdateCampaignParams
			Response = UpdateCampaignRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackUpdateCampaignParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.UpdateCampaign(ctx, request, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.UpdateCampaign(ctx, request, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeUpdateCampaignResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleUploadCampaignImageRequest handles uploadCampaignImage operation.
//
// Загружает изображение рекламного объявления. Если не
// передать изображение, то прежнее удалится.
//
// PUT /advertisers/{advertiserId}/campaigns/{campaignId}/image
func (s *Server) handleUploadCampaignImageRequest(args [2]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	statusWriter := &codeRecorder{ResponseWriter: w}
	w = statusWriter
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: UploadCampaignImageOperation,
			ID:   "uploadCampaignImage",
		}
	)
	params, err := decodeUploadCampaignImageParams(args, argsEscaped, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	request, close, err := s.decodeUploadCampaignImageRequest(r)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeRequest", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	defer func() {
		if err := close(); err != nil {
			recordError("CloseRequest", err)
		}
	}()

	var response UploadCampaignImageRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    UploadCampaignImageOperation,
			OperationSummary: "загрузка изображения рекламного объявления",
			OperationID:      "uploadCampaignImage",
			Body:             request,
			Params: middleware.Parameters{
				{
					Name: "advertiserId",
					In:   "path",
				}: params.AdvertiserId,
				{
					Name: "campaignId",
					In:   "path",
				}: params.CampaignId,
			},
			Raw: r,
		}

		type (
			Request  = UploadCampaignImageReq
			Params   = UploadCampaignImageParams
			Response = UploadCampaignImageRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackUploadCampaignImageParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.UploadCampaignImage(ctx, request, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.UploadCampaignImage(ctx, request, params)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeUploadCampaignImageResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleUpsertAdvertisersRequest handles upsertAdvertisers operation.
//
// Создаёт новых или обновляет существующих
// рекламодателей.
//
// POST /advertisers/bulk
func (s *Server) handleUpsertAdvertisersRequest(args [0]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	statusWriter := &codeRecorder{ResponseWriter: w}
	w = statusWriter
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: UpsertAdvertisersOperation,
			ID:   "upsertAdvertisers",
		}
	)
	request, close, err := s.decodeUpsertAdvertisersRequest(r)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeRequest", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	defer func() {
		if err := close(); err != nil {
			recordError("CloseRequest", err)
		}
	}()

	var response UpsertAdvertisersRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    UpsertAdvertisersOperation,
			OperationSummary: "Массовое создание/обновление рекламодателей",
			OperationID:      "upsertAdvertisers",
			Body:             request,
			Params:           middleware.Parameters{},
			Raw:              r,
		}

		type (
			Request  = []AdvertiserUpsert
			Params   = struct{}
			Response = UpsertAdvertisersRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			nil,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.UpsertAdvertisers(ctx, request)
				return response, err
			},
		)
	} else {
		response, err = s.h.UpsertAdvertisers(ctx, request)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeUpsertAdvertisersResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleUpsertClientsRequest handles upsertClients operation.
//
// Создаёт новых или обновляет существующих клиентов.
//
// POST /clients/bulk
func (s *Server) handleUpsertClientsRequest(args [0]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	statusWriter := &codeRecorder{ResponseWriter: w}
	w = statusWriter
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: UpsertClientsOperation,
			ID:   "upsertClients",
		}
	)
	request, close, err := s.decodeUpsertClientsRequest(r)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeRequest", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	defer func() {
		if err := close(); err != nil {
			recordError("CloseRequest", err)
		}
	}()

	var response UpsertClientsRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    UpsertClientsOperation,
			OperationSummary: "Массовое создание/обновление клиентов",
			OperationID:      "upsertClients",
			Body:             request,
			Params:           middleware.Parameters{},
			Raw:              r,
		}

		type (
			Request  = []ClientUpsert
			Params   = struct{}
			Response = UpsertClientsRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			nil,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.UpsertClients(ctx, request)
				return response, err
			},
		)
	} else {
		response, err = s.h.UpsertClients(ctx, request)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeUpsertClientsResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}

// handleUpsertMLScoreRequest handles upsertMLScore operation.
//
// Добавляет или обновляет ML скор для указанной пары
// клиент-рекламодатель.
//
// POST /ml-scores
func (s *Server) handleUpsertMLScoreRequest(args [0]string, argsEscaped bool, w http.ResponseWriter, r *http.Request) {
	statusWriter := &codeRecorder{ResponseWriter: w}
	w = statusWriter
	ctx := r.Context()

	var (
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name: UpsertMLScoreOperation,
			ID:   "upsertMLScore",
		}
	)
	request, close, err := s.decodeUpsertMLScoreRequest(r)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			OperationContext: opErrContext,
			Err:              err,
		}
		defer recordError("DecodeRequest", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	defer func() {
		if err := close(); err != nil {
			recordError("CloseRequest", err)
		}
	}()

	var response UpsertMLScoreRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:          ctx,
			OperationName:    UpsertMLScoreOperation,
			OperationSummary: "Добавление или обновление ML скора",
			OperationID:      "upsertMLScore",
			Body:             request,
			Params:           middleware.Parameters{},
			Raw:              r,
		}

		type (
			Request  = *MLScore
			Params   = struct{}
			Response = UpsertMLScoreRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			nil,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.UpsertMLScore(ctx, request)
				return response, err
			},
		)
	} else {
		response, err = s.h.UpsertMLScore(ctx, request)
	}
	if err != nil {
		defer recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeUpsertMLScoreResponse(response, w); err != nil {
		defer recordError("EncodeResponse", err)
		if !errors.Is(err, ht.ErrInternalServerErrorResponse) {
			s.cfg.ErrorHandler(ctx, w, r, err)
		}
		return
	}
}
