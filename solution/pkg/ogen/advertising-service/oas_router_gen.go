// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [2]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "a"
				origElem := elem
				if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'd': // Prefix: "d"
					origElem := elem
					if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 's': // Prefix: "s"
						origElem := elem
						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetAdForClientRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "adId"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/click"
								origElem := elem
								if l := len("/click"); len(elem) >= l && elem[0:l] == "/click" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleRecordAdClickRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 'v': // Prefix: "vertisers/"
						origElem := elem
						if l := len("vertisers/"); len(elem) >= l && elem[0:l] == "vertisers/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'b': // Prefix: "bulk"
							origElem := elem
							if l := len("bulk"); len(elem) >= l && elem[0:l] == "bulk" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleUpsertAdvertisersRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						}
						// Param: "advertiserId"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetAdvertiserByIdRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/campaigns"
							origElem := elem
							if l := len("/campaigns"); len(elem) >= l && elem[0:l] == "/campaigns" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleListCampaignsRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "POST":
									s.handleCreateCampaignRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,POST")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "campaignId"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[1] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									switch r.Method {
									case "DELETE":
										s.handleDeleteCampaignRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									case "GET":
										s.handleGetCampaignRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									case "PUT":
										s.handleUpdateCampaignRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "DELETE,GET,PUT")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/image"
									origElem := elem
									if l := len("/image"); len(elem) >= l && elem[0:l] == "/image" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "PUT":
											s.handleUploadCampaignImageRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "PUT")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'i': // Prefix: "i/"
					origElem := elem
					if l := len("i/"); len(elem) >= l && elem[0:l] == "i/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'g': // Prefix: "generate-ad-text"
						origElem := elem
						if l := len("generate-ad-text"); len(elem) >= l && elem[0:l] == "generate-ad-text" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleGenerateAdTextRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					case 'm': // Prefix: "moderate-ad-text"
						origElem := elem
						if l := len("moderate-ad-text"); len(elem) >= l && elem[0:l] == "moderate-ad-text" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleModerateAdTextRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'c': // Prefix: "clients/"
				origElem := elem
				if l := len("clients/"); len(elem) >= l && elem[0:l] == "clients/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'b': // Prefix: "bulk"
					origElem := elem
					if l := len("bulk"); len(elem) >= l && elem[0:l] == "bulk" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleUpsertClientsRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

					elem = origElem
				}
				// Param: "clientId"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleGetClientByIdRequest([1]string{
							args[0],
						}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

				elem = origElem
			case 'm': // Prefix: "ml-scores"
				origElem := elem
				if l := len("ml-scores"); len(elem) >= l && elem[0:l] == "ml-scores" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleUpsertMLScoreRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}

				elem = origElem
			case 's': // Prefix: "stats/"
				origElem := elem
				if l := len("stats/"); len(elem) >= l && elem[0:l] == "stats/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "advertisers/"
					origElem := elem
					if l := len("advertisers/"); len(elem) >= l && elem[0:l] == "advertisers/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "advertiserId"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/campaigns"
						origElem := elem
						if l := len("/campaigns"); len(elem) >= l && elem[0:l] == "/campaigns" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetAdvertiserCampaignsStatsRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/daily"
							origElem := elem
							if l := len("/daily"); len(elem) >= l && elem[0:l] == "/daily" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetAdvertiserDailyStatsRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'c': // Prefix: "campaigns/"
					origElem := elem
					if l := len("campaigns/"); len(elem) >= l && elem[0:l] == "campaigns/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "campaignId"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetCampaignStatsRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/daily"
						origElem := elem
						if l := len("/daily"); len(elem) >= l && elem[0:l] == "/daily" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetCampaignDailyStatsRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 't': // Prefix: "time/advance"
				origElem := elem
				if l := len("time/advance"); len(elem) >= l && elem[0:l] == "time/advance" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleAdvanceDayRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [2]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "a"
				origElem := elem
				if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'd': // Prefix: "d"
					origElem := elem
					if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 's': // Prefix: "s"
						origElem := elem
						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = GetAdForClientOperation
								r.summary = "Получение рекламного объявления для клиента"
								r.operationID = "getAdForClient"
								r.pathPattern = "/ads"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "adId"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/click"
								origElem := elem
								if l := len("/click"); len(elem) >= l && elem[0:l] == "/click" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = RecordAdClickOperation
										r.summary = "Фиксация перехода по рекламному объявлению"
										r.operationID = "recordAdClick"
										r.pathPattern = "/ads/{adId}/click"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					case 'v': // Prefix: "vertisers/"
						origElem := elem
						if l := len("vertisers/"); len(elem) >= l && elem[0:l] == "vertisers/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'b': // Prefix: "bulk"
							origElem := elem
							if l := len("bulk"); len(elem) >= l && elem[0:l] == "bulk" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = UpsertAdvertisersOperation
									r.summary = "Массовое создание/обновление рекламодателей"
									r.operationID = "upsertAdvertisers"
									r.pathPattern = "/advertisers/bulk"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}
						// Param: "advertiserId"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = GetAdvertiserByIdOperation
								r.summary = "Получение рекламодателя по ID"
								r.operationID = "getAdvertiserById"
								r.pathPattern = "/advertisers/{advertiserId}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/campaigns"
							origElem := elem
							if l := len("/campaigns"); len(elem) >= l && elem[0:l] == "/campaigns" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = ListCampaignsOperation
									r.summary = "Получение рекламных кампаний рекламодателя c пагинацией"
									r.operationID = "listCampaigns"
									r.pathPattern = "/advertisers/{advertiserId}/campaigns"
									r.args = args
									r.count = 1
									return r, true
								case "POST":
									r.name = CreateCampaignOperation
									r.summary = "Создание рекламной кампании"
									r.operationID = "createCampaign"
									r.pathPattern = "/advertisers/{advertiserId}/campaigns"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "campaignId"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[1] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									switch method {
									case "DELETE":
										r.name = DeleteCampaignOperation
										r.summary = "Удаление рекламной кампании"
										r.operationID = "deleteCampaign"
										r.pathPattern = "/advertisers/{advertiserId}/campaigns/{campaignId}"
										r.args = args
										r.count = 2
										return r, true
									case "GET":
										r.name = GetCampaignOperation
										r.summary = "Получение кампании по ID"
										r.operationID = "getCampaign"
										r.pathPattern = "/advertisers/{advertiserId}/campaigns/{campaignId}"
										r.args = args
										r.count = 2
										return r, true
									case "PUT":
										r.name = UpdateCampaignOperation
										r.summary = "Обновление рекламной кампании"
										r.operationID = "updateCampaign"
										r.pathPattern = "/advertisers/{advertiserId}/campaigns/{campaignId}"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/image"
									origElem := elem
									if l := len("/image"); len(elem) >= l && elem[0:l] == "/image" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "PUT":
											r.name = UploadCampaignImageOperation
											r.summary = "загрузка изображения рекламного объявления"
											r.operationID = "uploadCampaignImage"
											r.pathPattern = "/advertisers/{advertiserId}/campaigns/{campaignId}/image"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'i': // Prefix: "i/"
					origElem := elem
					if l := len("i/"); len(elem) >= l && elem[0:l] == "i/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'g': // Prefix: "generate-ad-text"
						origElem := elem
						if l := len("generate-ad-text"); len(elem) >= l && elem[0:l] == "generate-ad-text" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = GenerateAdTextOperation
								r.summary = "Генерация текста рекламного объявления"
								r.operationID = "generateAdText"
								r.pathPattern = "/ai/generate-ad-text"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'm': // Prefix: "moderate-ad-text"
						origElem := elem
						if l := len("moderate-ad-text"); len(elem) >= l && elem[0:l] == "moderate-ad-text" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = ModerateAdTextOperation
								r.summary = "Модерация текста рекламного объявления"
								r.operationID = "moderateAdText"
								r.pathPattern = "/ai/moderate-ad-text"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'c': // Prefix: "clients/"
				origElem := elem
				if l := len("clients/"); len(elem) >= l && elem[0:l] == "clients/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'b': // Prefix: "bulk"
					origElem := elem
					if l := len("bulk"); len(elem) >= l && elem[0:l] == "bulk" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = UpsertClientsOperation
							r.summary = "Массовое создание/обновление клиентов"
							r.operationID = "upsertClients"
							r.pathPattern = "/clients/bulk"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}
				// Param: "clientId"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = GetClientByIdOperation
						r.summary = "Получение клиента по ID"
						r.operationID = "getClientById"
						r.pathPattern = "/clients/{clientId}"
						r.args = args
						r.count = 1
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 'm': // Prefix: "ml-scores"
				origElem := elem
				if l := len("ml-scores"); len(elem) >= l && elem[0:l] == "ml-scores" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "POST":
						r.name = UpsertMLScoreOperation
						r.summary = "Добавление или обновление ML скора"
						r.operationID = "upsertMLScore"
						r.pathPattern = "/ml-scores"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 's': // Prefix: "stats/"
				origElem := elem
				if l := len("stats/"); len(elem) >= l && elem[0:l] == "stats/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "advertisers/"
					origElem := elem
					if l := len("advertisers/"); len(elem) >= l && elem[0:l] == "advertisers/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "advertiserId"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/campaigns"
						origElem := elem
						if l := len("/campaigns"); len(elem) >= l && elem[0:l] == "/campaigns" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = GetAdvertiserCampaignsStatsOperation
								r.summary = "Получение агрегированной статистики по всем кампаниям рекламодателя"
								r.operationID = "getAdvertiserCampaignsStats"
								r.pathPattern = "/stats/advertisers/{advertiserId}/campaigns"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/daily"
							origElem := elem
							if l := len("/daily"); len(elem) >= l && elem[0:l] == "/daily" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = GetAdvertiserDailyStatsOperation
									r.summary = "Получение ежедневной агрегированной статистики по всем кампаниям рекламодателя"
									r.operationID = "getAdvertiserDailyStats"
									r.pathPattern = "/stats/advertisers/{advertiserId}/campaigns/daily"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'c': // Prefix: "campaigns/"
					origElem := elem
					if l := len("campaigns/"); len(elem) >= l && elem[0:l] == "campaigns/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "campaignId"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = GetCampaignStatsOperation
							r.summary = "Получение статистики по рекламной кампании"
							r.operationID = "getCampaignStats"
							r.pathPattern = "/stats/campaigns/{campaignId}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/daily"
						origElem := elem
						if l := len("/daily"); len(elem) >= l && elem[0:l] == "/daily" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = GetCampaignDailyStatsOperation
								r.summary = "Получение ежедневной статистики по рекламной кампании"
								r.operationID = "getCampaignDailyStats"
								r.pathPattern = "/stats/campaigns/{campaignId}/daily"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 't': // Prefix: "time/advance"
				origElem := elem
				if l := len("time/advance"); len(elem) >= l && elem[0:l] == "time/advance" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "POST":
						r.name = AdvanceDayOperation
						r.summary = "Установка текущей даты"
						r.operationID = "advanceDay"
						r.pathPattern = "/time/advance"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	return r, false
}
