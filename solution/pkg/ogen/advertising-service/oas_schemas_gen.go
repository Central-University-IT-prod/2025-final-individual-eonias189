// Code generated by ogen, DO NOT EDIT.

package api

import (
	"io"

	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

// Объект, представляющий рекламное объявление, которое
// показывается клиенту.
// Ref: #/components/schemas/Ad
type Ad struct {
	// Уникальный идентификатор рекламного объявления
	// (всегда совпадает с id рекламной кампании).
	AdID uuid.UUID `json:"ad_id"`
	// Название рекламного объявления.
	AdTitle string `json:"ad_title"`
	// Текст рекламного объявления, который видит клиент.
	AdText string `json:"ad_text"`
	// Ссылка на изображение рекламного объявления.
	AdImageURL OptString `json:"ad_image_url"`
	// UUID рекламодателя, которому принадлежит объявление.
	AdvertiserID uuid.UUID `json:"advertiser_id"`
}

// GetAdID returns the value of AdID.
func (s *Ad) GetAdID() uuid.UUID {
	return s.AdID
}

// GetAdTitle returns the value of AdTitle.
func (s *Ad) GetAdTitle() string {
	return s.AdTitle
}

// GetAdText returns the value of AdText.
func (s *Ad) GetAdText() string {
	return s.AdText
}

// GetAdImageURL returns the value of AdImageURL.
func (s *Ad) GetAdImageURL() OptString {
	return s.AdImageURL
}

// GetAdvertiserID returns the value of AdvertiserID.
func (s *Ad) GetAdvertiserID() uuid.UUID {
	return s.AdvertiserID
}

// SetAdID sets the value of AdID.
func (s *Ad) SetAdID(val uuid.UUID) {
	s.AdID = val
}

// SetAdTitle sets the value of AdTitle.
func (s *Ad) SetAdTitle(val string) {
	s.AdTitle = val
}

// SetAdText sets the value of AdText.
func (s *Ad) SetAdText(val string) {
	s.AdText = val
}

// SetAdImageURL sets the value of AdImageURL.
func (s *Ad) SetAdImageURL(val OptString) {
	s.AdImageURL = val
}

// SetAdvertiserID sets the value of AdvertiserID.
func (s *Ad) SetAdvertiserID(val uuid.UUID) {
	s.AdvertiserID = val
}

func (*Ad) getAdForClientRes() {}

type AdvanceDayOK struct {
	// Текущий день (целое число).
	CurrentDate OptDate `json:"current_date"`
}

// GetCurrentDate returns the value of CurrentDate.
func (s *AdvanceDayOK) GetCurrentDate() OptDate {
	return s.CurrentDate
}

// SetCurrentDate sets the value of CurrentDate.
func (s *AdvanceDayOK) SetCurrentDate(val OptDate) {
	s.CurrentDate = val
}

func (*AdvanceDayOK) advanceDayRes() {}

type AdvanceDayReq struct {
	// Текущий день (целое число).
	CurrentDate OptDate `json:"current_date"`
}

// GetCurrentDate returns the value of CurrentDate.
func (s *AdvanceDayReq) GetCurrentDate() OptDate {
	return s.CurrentDate
}

// SetCurrentDate sets the value of CurrentDate.
func (s *AdvanceDayReq) SetCurrentDate(val OptDate) {
	s.CurrentDate = val
}

// Объект, представляющий рекламодателя.
// Ref: #/components/schemas/Advertiser
type Advertiser struct {
	// Уникальный идентификатор рекламодателя (UUID).
	AdvertiserID uuid.UUID `json:"advertiser_id"`
	// Название рекламодателя.
	Name string `json:"name"`
}

// GetAdvertiserID returns the value of AdvertiserID.
func (s *Advertiser) GetAdvertiserID() uuid.UUID {
	return s.AdvertiserID
}

// GetName returns the value of Name.
func (s *Advertiser) GetName() string {
	return s.Name
}

// SetAdvertiserID sets the value of AdvertiserID.
func (s *Advertiser) SetAdvertiserID(val uuid.UUID) {
	s.AdvertiserID = val
}

// SetName sets the value of Name.
func (s *Advertiser) SetName(val string) {
	s.Name = val
}

func (*Advertiser) getAdvertiserByIdRes() {}

// Ref: #/components/schemas/AdvertiserUpsert
type AdvertiserUpsert struct {
	// UUID рекламодателя.
	AdvertiserID uuid.UUID `json:"advertiser_id"`
	Name         string    `json:"name"`
}

// GetAdvertiserID returns the value of AdvertiserID.
func (s *AdvertiserUpsert) GetAdvertiserID() uuid.UUID {
	return s.AdvertiserID
}

// GetName returns the value of Name.
func (s *AdvertiserUpsert) GetName() string {
	return s.Name
}

// SetAdvertiserID sets the value of AdvertiserID.
func (s *AdvertiserUpsert) SetAdvertiserID(val uuid.UUID) {
	s.AdvertiserID = val
}

// SetName sets the value of Name.
func (s *AdvertiserUpsert) SetName(val string) {
	s.Name = val
}

// Объект, представляющий рекламную кампанию.
// Ref: #/components/schemas/Campaign
type Campaign struct {
	// Уникальный идентификатор рекламной кампании (UUID).
	CampaignID uuid.UUID `json:"campaign_id"`
	// UUID рекламодателя, которому принадлежит кампания.
	AdvertiserID uuid.UUID `json:"advertiser_id"`
	// Лимит показов рекламного объявления (фиксируется до
	// старта кампании).
	ImpressionsLimit int `json:"impressions_limit"`
	// Лимит переходов (кликов) по рекламному объявлению
	// (фиксируется до старта кампании).
	ClicksLimit int `json:"clicks_limit"`
	// Стоимость одного показа рекламного объявления.
	CostPerImpression float32 `json:"cost_per_impression"`
	// Стоимость одного перехода (клика) по рекламному
	// объявлению.
	CostPerClick float32 `json:"cost_per_click"`
	// Название рекламного объявления.
	AdTitle string `json:"ad_title"`
	// Текст рекламного объявления.
	AdText string `json:"ad_text"`
	// Ссылка на изображение рекламного объявления.
	AdImageURL OptString `json:"ad_image_url"`
	// День старта показа рекламного объявления
	// (включительно).
	StartDate Date `json:"start_date"`
	// День окончания показа рекламного объявления
	// (включительно).
	EndDate   Date      `json:"end_date"`
	Targeting Targeting `json:"targeting"`
}

// GetCampaignID returns the value of CampaignID.
func (s *Campaign) GetCampaignID() uuid.UUID {
	return s.CampaignID
}

// GetAdvertiserID returns the value of AdvertiserID.
func (s *Campaign) GetAdvertiserID() uuid.UUID {
	return s.AdvertiserID
}

// GetImpressionsLimit returns the value of ImpressionsLimit.
func (s *Campaign) GetImpressionsLimit() int {
	return s.ImpressionsLimit
}

// GetClicksLimit returns the value of ClicksLimit.
func (s *Campaign) GetClicksLimit() int {
	return s.ClicksLimit
}

// GetCostPerImpression returns the value of CostPerImpression.
func (s *Campaign) GetCostPerImpression() float32 {
	return s.CostPerImpression
}

// GetCostPerClick returns the value of CostPerClick.
func (s *Campaign) GetCostPerClick() float32 {
	return s.CostPerClick
}

// GetAdTitle returns the value of AdTitle.
func (s *Campaign) GetAdTitle() string {
	return s.AdTitle
}

// GetAdText returns the value of AdText.
func (s *Campaign) GetAdText() string {
	return s.AdText
}

// GetAdImageURL returns the value of AdImageURL.
func (s *Campaign) GetAdImageURL() OptString {
	return s.AdImageURL
}

// GetStartDate returns the value of StartDate.
func (s *Campaign) GetStartDate() Date {
	return s.StartDate
}

// GetEndDate returns the value of EndDate.
func (s *Campaign) GetEndDate() Date {
	return s.EndDate
}

// GetTargeting returns the value of Targeting.
func (s *Campaign) GetTargeting() Targeting {
	return s.Targeting
}

// SetCampaignID sets the value of CampaignID.
func (s *Campaign) SetCampaignID(val uuid.UUID) {
	s.CampaignID = val
}

// SetAdvertiserID sets the value of AdvertiserID.
func (s *Campaign) SetAdvertiserID(val uuid.UUID) {
	s.AdvertiserID = val
}

// SetImpressionsLimit sets the value of ImpressionsLimit.
func (s *Campaign) SetImpressionsLimit(val int) {
	s.ImpressionsLimit = val
}

// SetClicksLimit sets the value of ClicksLimit.
func (s *Campaign) SetClicksLimit(val int) {
	s.ClicksLimit = val
}

// SetCostPerImpression sets the value of CostPerImpression.
func (s *Campaign) SetCostPerImpression(val float32) {
	s.CostPerImpression = val
}

// SetCostPerClick sets the value of CostPerClick.
func (s *Campaign) SetCostPerClick(val float32) {
	s.CostPerClick = val
}

// SetAdTitle sets the value of AdTitle.
func (s *Campaign) SetAdTitle(val string) {
	s.AdTitle = val
}

// SetAdText sets the value of AdText.
func (s *Campaign) SetAdText(val string) {
	s.AdText = val
}

// SetAdImageURL sets the value of AdImageURL.
func (s *Campaign) SetAdImageURL(val OptString) {
	s.AdImageURL = val
}

// SetStartDate sets the value of StartDate.
func (s *Campaign) SetStartDate(val Date) {
	s.StartDate = val
}

// SetEndDate sets the value of EndDate.
func (s *Campaign) SetEndDate(val Date) {
	s.EndDate = val
}

// SetTargeting sets the value of Targeting.
func (s *Campaign) SetTargeting(val Targeting) {
	s.Targeting = val
}

func (*Campaign) createCampaignRes() {}
func (*Campaign) getCampaignRes()    {}
func (*Campaign) updateCampaignRes() {}

// Объект для создания новой рекламной кампании.
// Ref: #/components/schemas/CampaignCreate
type CampaignCreate struct {
	// Задаёт лимит показов для рекламного объявления.
	ImpressionsLimit int `json:"impressions_limit"`
	// Задаёт лимит переходов для рекламного объявления.
	ClicksLimit int `json:"clicks_limit"`
	// Стоимость одного показа объявления.
	CostPerImpression float32 `json:"cost_per_impression"`
	// Стоимость одного перехода (клика) по объявлению.
	CostPerClick float32 `json:"cost_per_click"`
	// Название рекламного объявления.
	AdTitle string `json:"ad_title"`
	// Текст рекламного объявления.
	AdText string `json:"ad_text"`
	// День начала показа рекламного объявления
	// (включительно).
	StartDate Date `json:"start_date"`
	// День окончания показа рекламного объявления
	// (включительно).
	EndDate   Date         `json:"end_date"`
	Targeting OptTargeting `json:"targeting"`
}

// GetImpressionsLimit returns the value of ImpressionsLimit.
func (s *CampaignCreate) GetImpressionsLimit() int {
	return s.ImpressionsLimit
}

// GetClicksLimit returns the value of ClicksLimit.
func (s *CampaignCreate) GetClicksLimit() int {
	return s.ClicksLimit
}

// GetCostPerImpression returns the value of CostPerImpression.
func (s *CampaignCreate) GetCostPerImpression() float32 {
	return s.CostPerImpression
}

// GetCostPerClick returns the value of CostPerClick.
func (s *CampaignCreate) GetCostPerClick() float32 {
	return s.CostPerClick
}

// GetAdTitle returns the value of AdTitle.
func (s *CampaignCreate) GetAdTitle() string {
	return s.AdTitle
}

// GetAdText returns the value of AdText.
func (s *CampaignCreate) GetAdText() string {
	return s.AdText
}

// GetStartDate returns the value of StartDate.
func (s *CampaignCreate) GetStartDate() Date {
	return s.StartDate
}

// GetEndDate returns the value of EndDate.
func (s *CampaignCreate) GetEndDate() Date {
	return s.EndDate
}

// GetTargeting returns the value of Targeting.
func (s *CampaignCreate) GetTargeting() OptTargeting {
	return s.Targeting
}

// SetImpressionsLimit sets the value of ImpressionsLimit.
func (s *CampaignCreate) SetImpressionsLimit(val int) {
	s.ImpressionsLimit = val
}

// SetClicksLimit sets the value of ClicksLimit.
func (s *CampaignCreate) SetClicksLimit(val int) {
	s.ClicksLimit = val
}

// SetCostPerImpression sets the value of CostPerImpression.
func (s *CampaignCreate) SetCostPerImpression(val float32) {
	s.CostPerImpression = val
}

// SetCostPerClick sets the value of CostPerClick.
func (s *CampaignCreate) SetCostPerClick(val float32) {
	s.CostPerClick = val
}

// SetAdTitle sets the value of AdTitle.
func (s *CampaignCreate) SetAdTitle(val string) {
	s.AdTitle = val
}

// SetAdText sets the value of AdText.
func (s *CampaignCreate) SetAdText(val string) {
	s.AdText = val
}

// SetStartDate sets the value of StartDate.
func (s *CampaignCreate) SetStartDate(val Date) {
	s.StartDate = val
}

// SetEndDate sets the value of EndDate.
func (s *CampaignCreate) SetEndDate(val Date) {
	s.EndDate = val
}

// SetTargeting sets the value of Targeting.
func (s *CampaignCreate) SetTargeting(val OptTargeting) {
	s.Targeting = val
}

// Объект для обновления параметров кампании, которые
// разрешено изменять до старта кампании.
// Ref: #/components/schemas/CampaignUpdate
type CampaignUpdate struct {
	// Задаёт лимит показов для рекламного объявления.
	ImpressionsLimit int `json:"impressions_limit"`
	// Задаёт лимит переходов для рекламного объявления.
	ClicksLimit int `json:"clicks_limit"`
	// Новая стоимость одного показа объявления.
	CostPerImpression float32 `json:"cost_per_impression"`
	// Новая стоимость одного перехода (клика) по объявлению.
	CostPerClick float32 `json:"cost_per_click"`
	// Новое название рекламного объявления.
	AdTitle string `json:"ad_title"`
	// Новый текст рекламного объявления.
	AdText string `json:"ad_text"`
	// День начала показа рекламного объявления
	// (включительно).
	StartDate Date `json:"start_date"`
	// День окончания показа рекламного объявления
	// (включительно).
	EndDate Date `json:"end_date"`
	// Новые параметры таргетирования для рекламной
	// кампании.
	Targeting OptTargeting `json:"targeting"`
}

// GetImpressionsLimit returns the value of ImpressionsLimit.
func (s *CampaignUpdate) GetImpressionsLimit() int {
	return s.ImpressionsLimit
}

// GetClicksLimit returns the value of ClicksLimit.
func (s *CampaignUpdate) GetClicksLimit() int {
	return s.ClicksLimit
}

// GetCostPerImpression returns the value of CostPerImpression.
func (s *CampaignUpdate) GetCostPerImpression() float32 {
	return s.CostPerImpression
}

// GetCostPerClick returns the value of CostPerClick.
func (s *CampaignUpdate) GetCostPerClick() float32 {
	return s.CostPerClick
}

// GetAdTitle returns the value of AdTitle.
func (s *CampaignUpdate) GetAdTitle() string {
	return s.AdTitle
}

// GetAdText returns the value of AdText.
func (s *CampaignUpdate) GetAdText() string {
	return s.AdText
}

// GetStartDate returns the value of StartDate.
func (s *CampaignUpdate) GetStartDate() Date {
	return s.StartDate
}

// GetEndDate returns the value of EndDate.
func (s *CampaignUpdate) GetEndDate() Date {
	return s.EndDate
}

// GetTargeting returns the value of Targeting.
func (s *CampaignUpdate) GetTargeting() OptTargeting {
	return s.Targeting
}

// SetImpressionsLimit sets the value of ImpressionsLimit.
func (s *CampaignUpdate) SetImpressionsLimit(val int) {
	s.ImpressionsLimit = val
}

// SetClicksLimit sets the value of ClicksLimit.
func (s *CampaignUpdate) SetClicksLimit(val int) {
	s.ClicksLimit = val
}

// SetCostPerImpression sets the value of CostPerImpression.
func (s *CampaignUpdate) SetCostPerImpression(val float32) {
	s.CostPerImpression = val
}

// SetCostPerClick sets the value of CostPerClick.
func (s *CampaignUpdate) SetCostPerClick(val float32) {
	s.CostPerClick = val
}

// SetAdTitle sets the value of AdTitle.
func (s *CampaignUpdate) SetAdTitle(val string) {
	s.AdTitle = val
}

// SetAdText sets the value of AdText.
func (s *CampaignUpdate) SetAdText(val string) {
	s.AdText = val
}

// SetStartDate sets the value of StartDate.
func (s *CampaignUpdate) SetStartDate(val Date) {
	s.StartDate = val
}

// SetEndDate sets the value of EndDate.
func (s *CampaignUpdate) SetEndDate(val Date) {
	s.EndDate = val
}

// SetTargeting sets the value of Targeting.
func (s *CampaignUpdate) SetTargeting(val OptTargeting) {
	s.Targeting = val
}

// Объект, представляющий клиента системы.
// Ref: #/components/schemas/Client
type ClientModel struct {
	// Уникальный идентификатор клиента (UUID).
	ClientID uuid.UUID `json:"client_id"`
	// Логин клиента в системе.
	Login string `json:"login"`
	// Возраст клиента.
	Age int `json:"age"`
	// Локация клиента (город, регион или район).
	Location string `json:"location"`
	// Пол клиента (MALE или FEMALE).
	Gender ClientModelGender `json:"gender"`
}

// GetClientID returns the value of ClientID.
func (s *ClientModel) GetClientID() uuid.UUID {
	return s.ClientID
}

// GetLogin returns the value of Login.
func (s *ClientModel) GetLogin() string {
	return s.Login
}

// GetAge returns the value of Age.
func (s *ClientModel) GetAge() int {
	return s.Age
}

// GetLocation returns the value of Location.
func (s *ClientModel) GetLocation() string {
	return s.Location
}

// GetGender returns the value of Gender.
func (s *ClientModel) GetGender() ClientModelGender {
	return s.Gender
}

// SetClientID sets the value of ClientID.
func (s *ClientModel) SetClientID(val uuid.UUID) {
	s.ClientID = val
}

// SetLogin sets the value of Login.
func (s *ClientModel) SetLogin(val string) {
	s.Login = val
}

// SetAge sets the value of Age.
func (s *ClientModel) SetAge(val int) {
	s.Age = val
}

// SetLocation sets the value of Location.
func (s *ClientModel) SetLocation(val string) {
	s.Location = val
}

// SetGender sets the value of Gender.
func (s *ClientModel) SetGender(val ClientModelGender) {
	s.Gender = val
}

func (*ClientModel) getClientByIdRes() {}

// Пол клиента (MALE или FEMALE).
type ClientModelGender string

const (
	ClientModelGenderMALE   ClientModelGender = "MALE"
	ClientModelGenderFEMALE ClientModelGender = "FEMALE"
)

// AllValues returns all ClientModelGender values.
func (ClientModelGender) AllValues() []ClientModelGender {
	return []ClientModelGender{
		ClientModelGenderMALE,
		ClientModelGenderFEMALE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ClientModelGender) MarshalText() ([]byte, error) {
	switch s {
	case ClientModelGenderMALE:
		return []byte(s), nil
	case ClientModelGenderFEMALE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ClientModelGender) UnmarshalText(data []byte) error {
	switch ClientModelGender(data) {
	case ClientModelGenderMALE:
		*s = ClientModelGenderMALE
		return nil
	case ClientModelGenderFEMALE:
		*s = ClientModelGenderFEMALE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ClientUpsert
type ClientUpsert struct {
	ClientID uuid.UUID          `json:"client_id"`
	Login    string             `json:"login"`
	Age      int                `json:"age"`
	Location string             `json:"location"`
	Gender   ClientUpsertGender `json:"gender"`
}

// GetClientID returns the value of ClientID.
func (s *ClientUpsert) GetClientID() uuid.UUID {
	return s.ClientID
}

// GetLogin returns the value of Login.
func (s *ClientUpsert) GetLogin() string {
	return s.Login
}

// GetAge returns the value of Age.
func (s *ClientUpsert) GetAge() int {
	return s.Age
}

// GetLocation returns the value of Location.
func (s *ClientUpsert) GetLocation() string {
	return s.Location
}

// GetGender returns the value of Gender.
func (s *ClientUpsert) GetGender() ClientUpsertGender {
	return s.Gender
}

// SetClientID sets the value of ClientID.
func (s *ClientUpsert) SetClientID(val uuid.UUID) {
	s.ClientID = val
}

// SetLogin sets the value of Login.
func (s *ClientUpsert) SetLogin(val string) {
	s.Login = val
}

// SetAge sets the value of Age.
func (s *ClientUpsert) SetAge(val int) {
	s.Age = val
}

// SetLocation sets the value of Location.
func (s *ClientUpsert) SetLocation(val string) {
	s.Location = val
}

// SetGender sets the value of Gender.
func (s *ClientUpsert) SetGender(val ClientUpsertGender) {
	s.Gender = val
}

type ClientUpsertGender string

const (
	ClientUpsertGenderMALE   ClientUpsertGender = "MALE"
	ClientUpsertGenderFEMALE ClientUpsertGender = "FEMALE"
)

// AllValues returns all ClientUpsertGender values.
func (ClientUpsertGender) AllValues() []ClientUpsertGender {
	return []ClientUpsertGender{
		ClientUpsertGenderMALE,
		ClientUpsertGenderFEMALE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ClientUpsertGender) MarshalText() ([]byte, error) {
	switch s {
	case ClientUpsertGenderMALE:
		return []byte(s), nil
	case ClientUpsertGenderFEMALE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ClientUpsertGender) UnmarshalText(data []byte) error {
	switch ClientUpsertGender(data) {
	case ClientUpsertGenderMALE:
		*s = ClientUpsertGenderMALE
		return nil
	case ClientUpsertGenderFEMALE:
		*s = ClientUpsertGenderFEMALE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/DailyStats
type DailyStats struct {
	// Общее количество уникальных показов рекламного
	// объявления.
	ImpressionsCount int `json:"impressions_count"`
	// Общее количество уникальных переходов (кликов) по
	// рекламному объявлению.
	ClicksCount int `json:"clicks_count"`
	// Коэффициент конверсии, вычисляемый как (clicks_count /
	// impressions_count * 100) в процентах.
	Conversion float64 `json:"conversion"`
	// Сумма денег, потраченная на показы рекламного
	// объявления.
	SpentImpressions float64 `json:"spent_impressions"`
	// Сумма денег, потраченная на переходы (клики) по
	// рекламному объявлению.
	SpentClicks float64 `json:"spent_clicks"`
	// Общая сумма денег, потраченная на кампанию (показы и
	// клики).
	SpentTotal float64 `json:"spent_total"`
	// День, за который была собрана статистика.
	Date Date `json:"date"`
}

// GetImpressionsCount returns the value of ImpressionsCount.
func (s *DailyStats) GetImpressionsCount() int {
	return s.ImpressionsCount
}

// GetClicksCount returns the value of ClicksCount.
func (s *DailyStats) GetClicksCount() int {
	return s.ClicksCount
}

// GetConversion returns the value of Conversion.
func (s *DailyStats) GetConversion() float64 {
	return s.Conversion
}

// GetSpentImpressions returns the value of SpentImpressions.
func (s *DailyStats) GetSpentImpressions() float64 {
	return s.SpentImpressions
}

// GetSpentClicks returns the value of SpentClicks.
func (s *DailyStats) GetSpentClicks() float64 {
	return s.SpentClicks
}

// GetSpentTotal returns the value of SpentTotal.
func (s *DailyStats) GetSpentTotal() float64 {
	return s.SpentTotal
}

// GetDate returns the value of Date.
func (s *DailyStats) GetDate() Date {
	return s.Date
}

// SetImpressionsCount sets the value of ImpressionsCount.
func (s *DailyStats) SetImpressionsCount(val int) {
	s.ImpressionsCount = val
}

// SetClicksCount sets the value of ClicksCount.
func (s *DailyStats) SetClicksCount(val int) {
	s.ClicksCount = val
}

// SetConversion sets the value of Conversion.
func (s *DailyStats) SetConversion(val float64) {
	s.Conversion = val
}

// SetSpentImpressions sets the value of SpentImpressions.
func (s *DailyStats) SetSpentImpressions(val float64) {
	s.SpentImpressions = val
}

// SetSpentClicks sets the value of SpentClicks.
func (s *DailyStats) SetSpentClicks(val float64) {
	s.SpentClicks = val
}

// SetSpentTotal sets the value of SpentTotal.
func (s *DailyStats) SetSpentTotal(val float64) {
	s.SpentTotal = val
}

// SetDate sets the value of Date.
func (s *DailyStats) SetDate(val Date) {
	s.Date = val
}

type Date int32

// DeleteCampaignNoContent is response for DeleteCampaign operation.
type DeleteCampaignNoContent struct{}

func (*DeleteCampaignNoContent) deleteCampaignRes() {}

type GenerateAdTextOK struct {
	// Сгенерированный текст рекламного объявления.
	AdText string `json:"ad_text"`
}

// GetAdText returns the value of AdText.
func (s *GenerateAdTextOK) GetAdText() string {
	return s.AdText
}

// SetAdText sets the value of AdText.
func (s *GenerateAdTextOK) SetAdText(val string) {
	s.AdText = val
}

func (*GenerateAdTextOK) generateAdTextRes() {}

type GenerateAdTextReq struct {
	// Заголовок рекламного объявления.
	AdTitle string `json:"ad_title"`
}

// GetAdTitle returns the value of AdTitle.
func (s *GenerateAdTextReq) GetAdTitle() string {
	return s.AdTitle
}

// SetAdTitle sets the value of AdTitle.
func (s *GenerateAdTextReq) SetAdTitle(val string) {
	s.AdTitle = val
}

type GetAdvertiserDailyStatsOKApplicationJSON []DailyStats

func (*GetAdvertiserDailyStatsOKApplicationJSON) getAdvertiserDailyStatsRes() {}

type GetCampaignDailyStatsOKApplicationJSON []DailyStats

func (*GetCampaignDailyStatsOKApplicationJSON) getCampaignDailyStatsRes() {}

type ListCampaignsOKApplicationJSON []Campaign

func (*ListCampaignsOKApplicationJSON) listCampaignsRes() {}

// Объект, представляющий ML скор для пары
// клиент-рекламодатель.
// Ref: #/components/schemas/MLScore
type MLScore struct {
	// UUID клиента для которого рассчитывается ML скор.
	ClientID uuid.UUID `json:"client_id"`
	// UUID рекламодателя для которого рассчитывается ML скор.
	AdvertiserID uuid.UUID `json:"advertiser_id"`
	// Целочисленное значение ML скора; чем больше – тем выше
	// релевантность.
	Score int `json:"score"`
}

// GetClientID returns the value of ClientID.
func (s *MLScore) GetClientID() uuid.UUID {
	return s.ClientID
}

// GetAdvertiserID returns the value of AdvertiserID.
func (s *MLScore) GetAdvertiserID() uuid.UUID {
	return s.AdvertiserID
}

// GetScore returns the value of Score.
func (s *MLScore) GetScore() int {
	return s.Score
}

// SetClientID sets the value of ClientID.
func (s *MLScore) SetClientID(val uuid.UUID) {
	s.ClientID = val
}

// SetAdvertiserID sets the value of AdvertiserID.
func (s *MLScore) SetAdvertiserID(val uuid.UUID) {
	s.AdvertiserID = val
}

// SetScore sets the value of Score.
func (s *MLScore) SetScore(val int) {
	s.Score = val
}

type ModerateAdTextOK struct {
	// Прошёл ли текст модерацию.
	Ok bool `json:"ok"`
	// Фразы, которые не прошли модерацию.
	IllegalPhrases []string `json:"illegal_phrases"`
}

// GetOk returns the value of Ok.
func (s *ModerateAdTextOK) GetOk() bool {
	return s.Ok
}

// GetIllegalPhrases returns the value of IllegalPhrases.
func (s *ModerateAdTextOK) GetIllegalPhrases() []string {
	return s.IllegalPhrases
}

// SetOk sets the value of Ok.
func (s *ModerateAdTextOK) SetOk(val bool) {
	s.Ok = val
}

// SetIllegalPhrases sets the value of IllegalPhrases.
func (s *ModerateAdTextOK) SetIllegalPhrases(val []string) {
	s.IllegalPhrases = val
}

func (*ModerateAdTextOK) moderateAdTextRes() {}

type ModerateAdTextReq struct {
	// Текст рекламного объявления.
	AdText string `json:"ad_text"`
}

// GetAdText returns the value of AdText.
func (s *ModerateAdTextReq) GetAdText() string {
	return s.AdText
}

// SetAdText sets the value of AdText.
func (s *ModerateAdTextReq) SetAdText(val string) {
	s.AdText = val
}

// NewNilString returns new NilString with value set to v.
func NewNilString(v string) NilString {
	return NilString{
		Value: v,
	}
}

// NilString is nullable string.
type NilString struct {
	Value string
	Null  bool
}

// SetTo sets value to v.
func (o *NilString) SetTo(v string) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilString) SetToNull() {
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAdvanceDayReq returns new OptAdvanceDayReq with value set to v.
func NewOptAdvanceDayReq(v AdvanceDayReq) OptAdvanceDayReq {
	return OptAdvanceDayReq{
		Value: v,
		Set:   true,
	}
}

// OptAdvanceDayReq is optional AdvanceDayReq.
type OptAdvanceDayReq struct {
	Value AdvanceDayReq
	Set   bool
}

// IsSet returns true if OptAdvanceDayReq was set.
func (o OptAdvanceDayReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAdvanceDayReq) Reset() {
	var v AdvanceDayReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAdvanceDayReq) SetTo(v AdvanceDayReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAdvanceDayReq) Get() (v AdvanceDayReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAdvanceDayReq) Or(d AdvanceDayReq) AdvanceDayReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDate returns new OptDate with value set to v.
func NewOptDate(v Date) OptDate {
	return OptDate{
		Value: v,
		Set:   true,
	}
}

// OptDate is optional Date.
type OptDate struct {
	Value Date
	Set   bool
}

// IsSet returns true if OptDate was set.
func (o OptDate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDate) Reset() {
	var v Date
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDate) SetTo(v Date) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDate) Get() (v Date, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDate) Or(d Date) Date {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInt returns new OptNilInt with value set to v.
func NewOptNilInt(v int) OptNilInt {
	return OptNilInt{
		Value: v,
		Set:   true,
	}
}

// OptNilInt is optional nullable int.
type OptNilInt struct {
	Value int
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInt was set.
func (o OptNilInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInt) SetTo(v int) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInt) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilInt) SetToNull() {
	o.Set = true
	o.Null = true
	var v int
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInt) Get() (v int, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilTargetingGender returns new OptNilTargetingGender with value set to v.
func NewOptNilTargetingGender(v TargetingGender) OptNilTargetingGender {
	return OptNilTargetingGender{
		Value: v,
		Set:   true,
	}
}

// OptNilTargetingGender is optional nullable TargetingGender.
type OptNilTargetingGender struct {
	Value TargetingGender
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilTargetingGender was set.
func (o OptNilTargetingGender) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilTargetingGender) Reset() {
	var v TargetingGender
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilTargetingGender) SetTo(v TargetingGender) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilTargetingGender) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilTargetingGender) SetToNull() {
	o.Set = true
	o.Null = true
	var v TargetingGender
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilTargetingGender) Get() (v TargetingGender, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilTargetingGender) Or(d TargetingGender) TargetingGender {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTargeting returns new OptTargeting with value set to v.
func NewOptTargeting(v Targeting) OptTargeting {
	return OptTargeting{
		Value: v,
		Set:   true,
	}
}

// OptTargeting is optional Targeting.
type OptTargeting struct {
	Value Targeting
	Set   bool
}

// IsSet returns true if OptTargeting was set.
func (o OptTargeting) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTargeting) Reset() {
	var v Targeting
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTargeting) SetTo(v Targeting) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTargeting) Get() (v Targeting, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTargeting) Or(d Targeting) Targeting {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// RecordAdClickNoContent is response for RecordAdClick operation.
type RecordAdClickNoContent struct{}

func (*RecordAdClickNoContent) recordAdClickRes() {}

type RecordAdClickReq struct {
	// UUID клиента, совершившего клик по объявлению.
	ClientID uuid.UUID `json:"client_id"`
}

// GetClientID returns the value of ClientID.
func (s *RecordAdClickReq) GetClientID() uuid.UUID {
	return s.ClientID
}

// SetClientID sets the value of ClientID.
func (s *RecordAdClickReq) SetClientID(val uuid.UUID) {
	s.ClientID = val
}

// Ref: #/components/schemas/ResourceEnum
type ResourceEnum string

const (
	ResourceEnumAdvertiser ResourceEnum = "Advertiser"
	ResourceEnumClient     ResourceEnum = "Client"
	ResourceEnumCampaign   ResourceEnum = "Campaign"
	ResourceEnumAd         ResourceEnum = "Ad"
)

// AllValues returns all ResourceEnum values.
func (ResourceEnum) AllValues() []ResourceEnum {
	return []ResourceEnum{
		ResourceEnumAdvertiser,
		ResourceEnumClient,
		ResourceEnumCampaign,
		ResourceEnumAd,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ResourceEnum) MarshalText() ([]byte, error) {
	switch s {
	case ResourceEnumAdvertiser:
		return []byte(s), nil
	case ResourceEnumClient:
		return []byte(s), nil
	case ResourceEnumCampaign:
		return []byte(s), nil
	case ResourceEnumAd:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ResourceEnum) UnmarshalText(data []byte) error {
	switch ResourceEnum(data) {
	case ResourceEnumAdvertiser:
		*s = ResourceEnumAdvertiser
		return nil
	case ResourceEnumClient:
		*s = ResourceEnumClient
		return nil
	case ResourceEnumCampaign:
		*s = ResourceEnumCampaign
		return nil
	case ResourceEnumAd:
		*s = ResourceEnumAd
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type Response400 struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *Response400) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *Response400) SetMessage(val OptString) {
	s.Message = val
}

func (*Response400) advanceDayRes()                  {}
func (*Response400) createCampaignRes()              {}
func (*Response400) deleteCampaignRes()              {}
func (*Response400) generateAdTextRes()              {}
func (*Response400) getAdForClientRes()              {}
func (*Response400) getAdvertiserByIdRes()           {}
func (*Response400) getAdvertiserCampaignsStatsRes() {}
func (*Response400) getAdvertiserDailyStatsRes()     {}
func (*Response400) getCampaignDailyStatsRes()       {}
func (*Response400) getCampaignRes()                 {}
func (*Response400) getCampaignStatsRes()            {}
func (*Response400) getClientByIdRes()               {}
func (*Response400) listCampaignsRes()               {}
func (*Response400) moderateAdTextRes()              {}
func (*Response400) recordAdClickRes()               {}
func (*Response400) updateCampaignRes()              {}
func (*Response400) uploadCampaignImageRes()         {}
func (*Response400) upsertAdvertisersRes()           {}
func (*Response400) upsertClientsRes()               {}
func (*Response400) upsertMLScoreRes()               {}

type Response404 struct {
	Resource ResourceEnum `json:"resource"`
}

// GetResource returns the value of Resource.
func (s *Response404) GetResource() ResourceEnum {
	return s.Resource
}

// SetResource sets the value of Resource.
func (s *Response404) SetResource(val ResourceEnum) {
	s.Resource = val
}

func (*Response404) createCampaignRes()              {}
func (*Response404) deleteCampaignRes()              {}
func (*Response404) getAdForClientRes()              {}
func (*Response404) getAdvertiserByIdRes()           {}
func (*Response404) getAdvertiserCampaignsStatsRes() {}
func (*Response404) getAdvertiserDailyStatsRes()     {}
func (*Response404) getCampaignDailyStatsRes()       {}
func (*Response404) getCampaignRes()                 {}
func (*Response404) getCampaignStatsRes()            {}
func (*Response404) getClientByIdRes()               {}
func (*Response404) listCampaignsRes()               {}
func (*Response404) recordAdClickRes()               {}
func (*Response404) updateCampaignRes()              {}
func (*Response404) uploadCampaignImageRes()         {}
func (*Response404) upsertMLScoreRes()               {}

// Объект, содержащий агрегированную статистику для
// рекламной кампании или рекламодателя.
// Ref: #/components/schemas/Stats
type Stats struct {
	// Общее количество уникальных показов рекламного
	// объявления.
	ImpressionsCount int `json:"impressions_count"`
	// Общее количество уникальных переходов (кликов) по
	// рекламному объявлению.
	ClicksCount int `json:"clicks_count"`
	// Коэффициент конверсии, вычисляемый как (clicks_count /
	// impressions_count * 100) в процентах.
	Conversion float64 `json:"conversion"`
	// Сумма денег, потраченная на показы рекламного
	// объявления.
	SpentImpressions float64 `json:"spent_impressions"`
	// Сумма денег, потраченная на переходы (клики) по
	// рекламному объявлению.
	SpentClicks float64 `json:"spent_clicks"`
	// Общая сумма денег, потраченная на кампанию (показы и
	// клики).
	SpentTotal float64 `json:"spent_total"`
}

// GetImpressionsCount returns the value of ImpressionsCount.
func (s *Stats) GetImpressionsCount() int {
	return s.ImpressionsCount
}

// GetClicksCount returns the value of ClicksCount.
func (s *Stats) GetClicksCount() int {
	return s.ClicksCount
}

// GetConversion returns the value of Conversion.
func (s *Stats) GetConversion() float64 {
	return s.Conversion
}

// GetSpentImpressions returns the value of SpentImpressions.
func (s *Stats) GetSpentImpressions() float64 {
	return s.SpentImpressions
}

// GetSpentClicks returns the value of SpentClicks.
func (s *Stats) GetSpentClicks() float64 {
	return s.SpentClicks
}

// GetSpentTotal returns the value of SpentTotal.
func (s *Stats) GetSpentTotal() float64 {
	return s.SpentTotal
}

// SetImpressionsCount sets the value of ImpressionsCount.
func (s *Stats) SetImpressionsCount(val int) {
	s.ImpressionsCount = val
}

// SetClicksCount sets the value of ClicksCount.
func (s *Stats) SetClicksCount(val int) {
	s.ClicksCount = val
}

// SetConversion sets the value of Conversion.
func (s *Stats) SetConversion(val float64) {
	s.Conversion = val
}

// SetSpentImpressions sets the value of SpentImpressions.
func (s *Stats) SetSpentImpressions(val float64) {
	s.SpentImpressions = val
}

// SetSpentClicks sets the value of SpentClicks.
func (s *Stats) SetSpentClicks(val float64) {
	s.SpentClicks = val
}

// SetSpentTotal sets the value of SpentTotal.
func (s *Stats) SetSpentTotal(val float64) {
	s.SpentTotal = val
}

func (*Stats) getAdvertiserCampaignsStatsRes() {}
func (*Stats) getCampaignStatsRes()            {}

// Объект, описывающий настройки таргетирования для
// рекламной кампании.
// Ref: #/components/schemas/Targeting
type Targeting struct {
	// Пол аудитории для показа объявления (MALE, FEMALE или ALL).
	Gender OptNilTargetingGender `json:"gender"`
	// Минимальный возраст аудитории (включительно) для
	// показа объявления.
	AgeFrom OptNilInt `json:"age_from"`
	// Максимальный возраст аудитории (включительно) для
	// показа объявления.
	AgeTo OptNilInt `json:"age_to"`
	// Локация аудитории, для которой будет показано
	// объявление.
	Location OptNilString `json:"location"`
}

// GetGender returns the value of Gender.
func (s *Targeting) GetGender() OptNilTargetingGender {
	return s.Gender
}

// GetAgeFrom returns the value of AgeFrom.
func (s *Targeting) GetAgeFrom() OptNilInt {
	return s.AgeFrom
}

// GetAgeTo returns the value of AgeTo.
func (s *Targeting) GetAgeTo() OptNilInt {
	return s.AgeTo
}

// GetLocation returns the value of Location.
func (s *Targeting) GetLocation() OptNilString {
	return s.Location
}

// SetGender sets the value of Gender.
func (s *Targeting) SetGender(val OptNilTargetingGender) {
	s.Gender = val
}

// SetAgeFrom sets the value of AgeFrom.
func (s *Targeting) SetAgeFrom(val OptNilInt) {
	s.AgeFrom = val
}

// SetAgeTo sets the value of AgeTo.
func (s *Targeting) SetAgeTo(val OptNilInt) {
	s.AgeTo = val
}

// SetLocation sets the value of Location.
func (s *Targeting) SetLocation(val OptNilString) {
	s.Location = val
}

// Пол аудитории для показа объявления (MALE, FEMALE или ALL).
type TargetingGender string

const (
	TargetingGenderMALE   TargetingGender = "MALE"
	TargetingGenderFEMALE TargetingGender = "FEMALE"
	TargetingGenderALL    TargetingGender = "ALL"
)

// AllValues returns all TargetingGender values.
func (TargetingGender) AllValues() []TargetingGender {
	return []TargetingGender{
		TargetingGenderMALE,
		TargetingGenderFEMALE,
		TargetingGenderALL,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TargetingGender) MarshalText() ([]byte, error) {
	switch s {
	case TargetingGenderMALE:
		return []byte(s), nil
	case TargetingGenderFEMALE:
		return []byte(s), nil
	case TargetingGenderALL:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TargetingGender) UnmarshalText(data []byte) error {
	switch TargetingGender(data) {
	case TargetingGenderMALE:
		*s = TargetingGenderMALE
		return nil
	case TargetingGenderFEMALE:
		*s = TargetingGenderFEMALE
		return nil
	case TargetingGenderALL:
		*s = TargetingGenderALL
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// UpdateCampaignForbidden is response for UpdateCampaign operation.
type UpdateCampaignForbidden struct{}

func (*UpdateCampaignForbidden) updateCampaignRes() {}

type UploadCampaignImageOK struct {
	// Ссылка на изображение рекламного объявления.
	AdImageURL NilString `json:"ad_image_url"`
}

// GetAdImageURL returns the value of AdImageURL.
func (s *UploadCampaignImageOK) GetAdImageURL() NilString {
	return s.AdImageURL
}

// SetAdImageURL sets the value of AdImageURL.
func (s *UploadCampaignImageOK) SetAdImageURL(val NilString) {
	s.AdImageURL = val
}

func (*UploadCampaignImageOK) uploadCampaignImageRes() {}

type UploadCampaignImageReqImageJpeg struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s UploadCampaignImageReqImageJpeg) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*UploadCampaignImageReqImageJpeg) uploadCampaignImageReq() {}

type UploadCampaignImageReqImagePNG struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s UploadCampaignImageReqImagePNG) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*UploadCampaignImageReqImagePNG) uploadCampaignImageReq() {}

type UpsertAdvertisersCreatedApplicationJSON []Advertiser

func (*UpsertAdvertisersCreatedApplicationJSON) upsertAdvertisersRes() {}

type UpsertClientsCreatedApplicationJSON []ClientModel

func (*UpsertClientsCreatedApplicationJSON) upsertClientsRes() {}

// UpsertMLScoreOK is response for UpsertMLScore operation.
type UpsertMLScoreOK struct{}

func (*UpsertMLScoreOK) upsertMLScoreRes() {}
