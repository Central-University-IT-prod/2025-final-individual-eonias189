// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"
	"github.com/google/uuid"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// CreateCampaignParams is parameters of createCampaign operation.
type CreateCampaignParams struct {
	// UUID рекламодателя, для которого создаётся кампания.
	AdvertiserId uuid.UUID
}

func unpackCreateCampaignParams(packed middleware.Parameters) (params CreateCampaignParams) {
	{
		key := middleware.ParameterKey{
			Name: "advertiserId",
			In:   "path",
		}
		params.AdvertiserId = packed[key].(uuid.UUID)
	}
	return params
}

func decodeCreateCampaignParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateCampaignParams, _ error) {
	// Decode path: advertiserId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "advertiserId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.AdvertiserId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "advertiserId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteCampaignParams is parameters of deleteCampaign operation.
type DeleteCampaignParams struct {
	// UUID рекламодателя, которому принадлежит кампания.
	AdvertiserId uuid.UUID
	// UUID рекламной кампании, которую необходимо удалить.
	CampaignId uuid.UUID
}

func unpackDeleteCampaignParams(packed middleware.Parameters) (params DeleteCampaignParams) {
	{
		key := middleware.ParameterKey{
			Name: "advertiserId",
			In:   "path",
		}
		params.AdvertiserId = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "campaignId",
			In:   "path",
		}
		params.CampaignId = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteCampaignParams(args [2]string, argsEscaped bool, r *http.Request) (params DeleteCampaignParams, _ error) {
	// Decode path: advertiserId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "advertiserId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.AdvertiserId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "advertiserId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: campaignId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "campaignId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.CampaignId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "campaignId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetAdForClientParams is parameters of getAdForClient operation.
type GetAdForClientParams struct {
	// UUID клиента, запрашивающего показ объявления.
	ClientID uuid.UUID
}

func unpackGetAdForClientParams(packed middleware.Parameters) (params GetAdForClientParams) {
	{
		key := middleware.ParameterKey{
			Name: "client_id",
			In:   "query",
		}
		params.ClientID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetAdForClientParams(args [0]string, argsEscaped bool, r *http.Request) (params GetAdForClientParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: client_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "client_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ClientID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "client_id",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetAdvertiserByIdParams is parameters of getAdvertiserById operation.
type GetAdvertiserByIdParams struct {
	// UUID рекламодателя.
	AdvertiserId uuid.UUID
}

func unpackGetAdvertiserByIdParams(packed middleware.Parameters) (params GetAdvertiserByIdParams) {
	{
		key := middleware.ParameterKey{
			Name: "advertiserId",
			In:   "path",
		}
		params.AdvertiserId = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetAdvertiserByIdParams(args [1]string, argsEscaped bool, r *http.Request) (params GetAdvertiserByIdParams, _ error) {
	// Decode path: advertiserId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "advertiserId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.AdvertiserId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "advertiserId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetAdvertiserCampaignsStatsParams is parameters of getAdvertiserCampaignsStats operation.
type GetAdvertiserCampaignsStatsParams struct {
	// UUID рекламодателя, для которого запрашивается
	// статистика.
	AdvertiserId uuid.UUID
}

func unpackGetAdvertiserCampaignsStatsParams(packed middleware.Parameters) (params GetAdvertiserCampaignsStatsParams) {
	{
		key := middleware.ParameterKey{
			Name: "advertiserId",
			In:   "path",
		}
		params.AdvertiserId = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetAdvertiserCampaignsStatsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetAdvertiserCampaignsStatsParams, _ error) {
	// Decode path: advertiserId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "advertiserId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.AdvertiserId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "advertiserId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetAdvertiserDailyStatsParams is parameters of getAdvertiserDailyStats operation.
type GetAdvertiserDailyStatsParams struct {
	// UUID рекламодателя, для которого запрашивается
	// ежедневная статистика по кампаниям.
	AdvertiserId uuid.UUID
}

func unpackGetAdvertiserDailyStatsParams(packed middleware.Parameters) (params GetAdvertiserDailyStatsParams) {
	{
		key := middleware.ParameterKey{
			Name: "advertiserId",
			In:   "path",
		}
		params.AdvertiserId = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetAdvertiserDailyStatsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetAdvertiserDailyStatsParams, _ error) {
	// Decode path: advertiserId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "advertiserId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.AdvertiserId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "advertiserId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetCampaignParams is parameters of getCampaign operation.
type GetCampaignParams struct {
	// UUID рекламодателя, которому принадлежит кампания.
	AdvertiserId uuid.UUID
	// UUID рекламной кампании, которую необходимо получить.
	CampaignId uuid.UUID
}

func unpackGetCampaignParams(packed middleware.Parameters) (params GetCampaignParams) {
	{
		key := middleware.ParameterKey{
			Name: "advertiserId",
			In:   "path",
		}
		params.AdvertiserId = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "campaignId",
			In:   "path",
		}
		params.CampaignId = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetCampaignParams(args [2]string, argsEscaped bool, r *http.Request) (params GetCampaignParams, _ error) {
	// Decode path: advertiserId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "advertiserId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.AdvertiserId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "advertiserId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: campaignId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "campaignId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.CampaignId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "campaignId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetCampaignDailyStatsParams is parameters of getCampaignDailyStats operation.
type GetCampaignDailyStatsParams struct {
	// UUID рекламной кампании, для которой запрашивается
	// ежедневная статистика.
	CampaignId uuid.UUID
}

func unpackGetCampaignDailyStatsParams(packed middleware.Parameters) (params GetCampaignDailyStatsParams) {
	{
		key := middleware.ParameterKey{
			Name: "campaignId",
			In:   "path",
		}
		params.CampaignId = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetCampaignDailyStatsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetCampaignDailyStatsParams, _ error) {
	// Decode path: campaignId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "campaignId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.CampaignId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "campaignId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetCampaignStatsParams is parameters of getCampaignStats operation.
type GetCampaignStatsParams struct {
	// UUID рекламной кампании, для которой запрашивается
	// статистика.
	CampaignId uuid.UUID
}

func unpackGetCampaignStatsParams(packed middleware.Parameters) (params GetCampaignStatsParams) {
	{
		key := middleware.ParameterKey{
			Name: "campaignId",
			In:   "path",
		}
		params.CampaignId = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetCampaignStatsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetCampaignStatsParams, _ error) {
	// Decode path: campaignId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "campaignId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.CampaignId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "campaignId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetClientByIdParams is parameters of getClientById operation.
type GetClientByIdParams struct {
	// UUID клиента.
	ClientId uuid.UUID
}

func unpackGetClientByIdParams(packed middleware.Parameters) (params GetClientByIdParams) {
	{
		key := middleware.ParameterKey{
			Name: "clientId",
			In:   "path",
		}
		params.ClientId = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetClientByIdParams(args [1]string, argsEscaped bool, r *http.Request) (params GetClientByIdParams, _ error) {
	// Decode path: clientId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "clientId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ClientId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "clientId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ListCampaignsParams is parameters of listCampaigns operation.
type ListCampaignsParams struct {
	// UUID рекламодателя, для которого запрашиваются
	// кампании.
	AdvertiserId uuid.UUID
	// Количество элементов на странице.
	Size OptInt
	// Номер страницы.
	Page OptInt
}

func unpackListCampaignsParams(packed middleware.Parameters) (params ListCampaignsParams) {
	{
		key := middleware.ParameterKey{
			Name: "advertiserId",
			In:   "path",
		}
		params.AdvertiserId = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "size",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Size = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt)
		}
	}
	return params
}

func decodeListCampaignsParams(args [1]string, argsEscaped bool, r *http.Request) (params ListCampaignsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: advertiserId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "advertiserId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.AdvertiserId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "advertiserId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: size.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "size",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSizeVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Size.SetTo(paramsDotSizeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "size",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// RecordAdClickParams is parameters of recordAdClick operation.
type RecordAdClickParams struct {
	// UUID рекламного объявления (идентификатор кампании), по
	// которому совершен клик.
	AdId uuid.UUID
}

func unpackRecordAdClickParams(packed middleware.Parameters) (params RecordAdClickParams) {
	{
		key := middleware.ParameterKey{
			Name: "adId",
			In:   "path",
		}
		params.AdId = packed[key].(uuid.UUID)
	}
	return params
}

func decodeRecordAdClickParams(args [1]string, argsEscaped bool, r *http.Request) (params RecordAdClickParams, _ error) {
	// Decode path: adId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "adId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.AdId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "adId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateCampaignParams is parameters of updateCampaign operation.
type UpdateCampaignParams struct {
	// UUID рекламодателя, которому принадлежит кампания.
	AdvertiserId uuid.UUID
	// UUID рекламной кампании, которую необходимо обновить.
	CampaignId uuid.UUID
}

func unpackUpdateCampaignParams(packed middleware.Parameters) (params UpdateCampaignParams) {
	{
		key := middleware.ParameterKey{
			Name: "advertiserId",
			In:   "path",
		}
		params.AdvertiserId = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "campaignId",
			In:   "path",
		}
		params.CampaignId = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpdateCampaignParams(args [2]string, argsEscaped bool, r *http.Request) (params UpdateCampaignParams, _ error) {
	// Decode path: advertiserId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "advertiserId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.AdvertiserId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "advertiserId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: campaignId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "campaignId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.CampaignId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "campaignId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UploadCampaignImageParams is parameters of uploadCampaignImage operation.
type UploadCampaignImageParams struct {
	// UUID рекламодателя, которому принадлежит кампания.
	AdvertiserId uuid.UUID
	// UUID рекламной кампании, которую необходимо обновить.
	CampaignId uuid.UUID
}

func unpackUploadCampaignImageParams(packed middleware.Parameters) (params UploadCampaignImageParams) {
	{
		key := middleware.ParameterKey{
			Name: "advertiserId",
			In:   "path",
		}
		params.AdvertiserId = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "campaignId",
			In:   "path",
		}
		params.CampaignId = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUploadCampaignImageParams(args [2]string, argsEscaped bool, r *http.Request) (params UploadCampaignImageParams, _ error) {
	// Decode path: advertiserId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "advertiserId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.AdvertiserId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "advertiserId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: campaignId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "campaignId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.CampaignId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "campaignId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
