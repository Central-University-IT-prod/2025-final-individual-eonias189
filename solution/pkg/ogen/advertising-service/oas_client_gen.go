// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
	"net/url"
	"strings"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/uri"
)

func trimTrailingSlashes(u *url.URL) {
	u.Path = strings.TrimRight(u.Path, "/")
	u.RawPath = strings.TrimRight(u.RawPath, "/")
}

// Invoker invokes operations described by OpenAPI v3 specification.
type Invoker interface {
	AIInvoker
	AdsInvoker
	AdvertisersInvoker
	CampaignsInvoker
	ClientsInvoker
	StatisticsInvoker
	TimeInvoker
}

// AIInvoker invokes operations described by OpenAPI v3 specification.
//
// x-gen-operation-group: AI
type AIInvoker interface {
	// GenerateAdText invokes generateAdText operation.
	//
	// Генерирует текст рекламного объявления.
	//
	// POST /ai/generate-ad-text
	GenerateAdText(ctx context.Context, request *GenerateAdTextReq) (GenerateAdTextRes, error)
	// ModerateAdText invokes moderateAdText operation.
	//
	// Модерирует текст рекламного объявления.
	//
	// POST /ai/moderate-ad-text
	ModerateAdText(ctx context.Context, request *ModerateAdTextReq) (ModerateAdTextRes, error)
}

// AdsInvoker invokes operations described by OpenAPI v3 specification.
//
// x-gen-operation-group: Ads
type AdsInvoker interface {
	// GetAdForClient invokes getAdForClient operation.
	//
	// Возвращает рекламное объявление, подходящее для
	// показа клиенту с учетом таргетинга и ML скора.
	//
	// GET /ads
	GetAdForClient(ctx context.Context, params GetAdForClientParams) (GetAdForClientRes, error)
	// RecordAdClick invokes recordAdClick operation.
	//
	// Фиксирует клик (переход) клиента по рекламному
	// объявлению.
	//
	// POST /ads/{adId}/click
	RecordAdClick(ctx context.Context, request *RecordAdClickReq, params RecordAdClickParams) (RecordAdClickRes, error)
}

// AdvertisersInvoker invokes operations described by OpenAPI v3 specification.
//
// x-gen-operation-group: Advertisers
type AdvertisersInvoker interface {
	// GetAdvertiserById invokes getAdvertiserById operation.
	//
	// Возвращает информацию о рекламодателе по его ID.
	//
	// GET /advertisers/{advertiserId}
	GetAdvertiserById(ctx context.Context, params GetAdvertiserByIdParams) (GetAdvertiserByIdRes, error)
	// UpsertAdvertisers invokes upsertAdvertisers operation.
	//
	// Создаёт новых или обновляет существующих
	// рекламодателей.
	//
	// POST /advertisers/bulk
	UpsertAdvertisers(ctx context.Context, request []AdvertiserUpsert) (UpsertAdvertisersRes, error)
	// UpsertMLScore invokes upsertMLScore operation.
	//
	// Добавляет или обновляет ML скор для указанной пары
	// клиент-рекламодатель.
	//
	// POST /ml-scores
	UpsertMLScore(ctx context.Context, request *MLScore) (UpsertMLScoreRes, error)
}

// CampaignsInvoker invokes operations described by OpenAPI v3 specification.
//
// x-gen-operation-group: Campaigns
type CampaignsInvoker interface {
	// CreateCampaign invokes createCampaign operation.
	//
	// Создаёт новую рекламную кампанию для указанного
	// рекламодателя.
	//
	// POST /advertisers/{advertiserId}/campaigns
	CreateCampaign(ctx context.Context, request *CampaignCreate, params CreateCampaignParams) (CreateCampaignRes, error)
	// DeleteCampaign invokes deleteCampaign operation.
	//
	// Удаляет рекламную кампанию рекламодателя по
	// заданному campaignId.
	//
	// DELETE /advertisers/{advertiserId}/campaigns/{campaignId}
	DeleteCampaign(ctx context.Context, params DeleteCampaignParams) (DeleteCampaignRes, error)
	// GetCampaign invokes getCampaign operation.
	//
	// Получение кампании по ID.
	//
	// GET /advertisers/{advertiserId}/campaigns/{campaignId}
	GetCampaign(ctx context.Context, params GetCampaignParams) (GetCampaignRes, error)
	// ListCampaigns invokes listCampaigns operation.
	//
	// Возвращает список рекламных кампаний для указанного
	// рекламодателя с пагинацией.
	//
	// GET /advertisers/{advertiserId}/campaigns
	ListCampaigns(ctx context.Context, params ListCampaignsParams) (ListCampaignsRes, error)
	// UpdateCampaign invokes updateCampaign operation.
	//
	// Обновляет разрешённые параметры рекламной кампании
	// до её старта.
	//
	// PUT /advertisers/{advertiserId}/campaigns/{campaignId}
	UpdateCampaign(ctx context.Context, request *CampaignUpdate, params UpdateCampaignParams) (UpdateCampaignRes, error)
	// UploadCampaignImage invokes uploadCampaignImage operation.
	//
	// Загружает изображение рекламного объявления. Если не
	// передать изображение, то прежнее удалится.
	//
	// PUT /advertisers/{advertiserId}/campaigns/{campaignId}/image
	UploadCampaignImage(ctx context.Context, request UploadCampaignImageReq, params UploadCampaignImageParams) (UploadCampaignImageRes, error)
}

// ClientsInvoker invokes operations described by OpenAPI v3 specification.
//
// x-gen-operation-group: Clients
type ClientsInvoker interface {
	// GetClientById invokes getClientById operation.
	//
	// Возвращает информацию о клиенте по его ID.
	//
	// GET /clients/{clientId}
	GetClientById(ctx context.Context, params GetClientByIdParams) (GetClientByIdRes, error)
	// UpsertClients invokes upsertClients operation.
	//
	// Создаёт новых или обновляет существующих клиентов.
	//
	// POST /clients/bulk
	UpsertClients(ctx context.Context, request []ClientUpsert) (UpsertClientsRes, error)
}

// StatisticsInvoker invokes operations described by OpenAPI v3 specification.
//
// x-gen-operation-group: Statistics
type StatisticsInvoker interface {
	// GetAdvertiserCampaignsStats invokes getAdvertiserCampaignsStats operation.
	//
	// Возвращает сводную статистику по всем рекламным
	// кампаниям, принадлежащим заданному рекламодателю.
	//
	// GET /stats/advertisers/{advertiserId}/campaigns
	GetAdvertiserCampaignsStats(ctx context.Context, params GetAdvertiserCampaignsStatsParams) (GetAdvertiserCampaignsStatsRes, error)
	// GetAdvertiserDailyStats invokes getAdvertiserDailyStats operation.
	//
	// Возвращает массив ежедневной сводной статистики по
	// всем рекламным кампаниям заданного рекламодателя.
	//
	// GET /stats/advertisers/{advertiserId}/campaigns/daily
	GetAdvertiserDailyStats(ctx context.Context, params GetAdvertiserDailyStatsParams) (GetAdvertiserDailyStatsRes, error)
	// GetCampaignDailyStats invokes getCampaignDailyStats operation.
	//
	// Возвращает массив ежедневной статистики для
	// указанной рекламной кампании.
	//
	// GET /stats/campaigns/{campaignId}/daily
	GetCampaignDailyStats(ctx context.Context, params GetCampaignDailyStatsParams) (GetCampaignDailyStatsRes, error)
	// GetCampaignStats invokes getCampaignStats operation.
	//
	// Возвращает агрегированную статистику (показы,
	// переходы, затраты и конверсию) для заданной рекламной
	// кампании.
	//
	// GET /stats/campaigns/{campaignId}
	GetCampaignStats(ctx context.Context, params GetCampaignStatsParams) (GetCampaignStatsRes, error)
}

// TimeInvoker invokes operations described by OpenAPI v3 specification.
//
// x-gen-operation-group: Time
type TimeInvoker interface {
	// AdvanceDay invokes advanceDay operation.
	//
	// Устанавливает текущий день в системе в заданную дату.
	//
	// POST /time/advance
	AdvanceDay(ctx context.Context, request OptAdvanceDayReq) (AdvanceDayRes, error)
}

// Client implements OAS client.
type Client struct {
	serverURL *url.URL
	baseClient
}

var _ Handler = struct {
	*Client
}{}

// NewClient initializes new Client defined by OAS.
func NewClient(serverURL string, opts ...ClientOption) (*Client, error) {
	u, err := url.Parse(serverURL)
	if err != nil {
		return nil, err
	}
	trimTrailingSlashes(u)

	c, err := newClientConfig(opts...).baseClient()
	if err != nil {
		return nil, err
	}
	return &Client{
		serverURL:  u,
		baseClient: c,
	}, nil
}

type serverURLKey struct{}

// WithServerURL sets context key to override server URL.
func WithServerURL(ctx context.Context, u *url.URL) context.Context {
	return context.WithValue(ctx, serverURLKey{}, u)
}

func (c *Client) requestURL(ctx context.Context) *url.URL {
	u, ok := ctx.Value(serverURLKey{}).(*url.URL)
	if !ok {
		return c.serverURL
	}
	return u
}

// AdvanceDay invokes advanceDay operation.
//
// Устанавливает текущий день в системе в заданную дату.
//
// POST /time/advance
func (c *Client) AdvanceDay(ctx context.Context, request OptAdvanceDayReq) (AdvanceDayRes, error) {
	res, err := c.sendAdvanceDay(ctx, request)
	return res, err
}

func (c *Client) sendAdvanceDay(ctx context.Context, request OptAdvanceDayReq) (res AdvanceDayRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/time/advance"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeAdvanceDayRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeAdvanceDayResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// CreateCampaign invokes createCampaign operation.
//
// Создаёт новую рекламную кампанию для указанного
// рекламодателя.
//
// POST /advertisers/{advertiserId}/campaigns
func (c *Client) CreateCampaign(ctx context.Context, request *CampaignCreate, params CreateCampaignParams) (CreateCampaignRes, error) {
	res, err := c.sendCreateCampaign(ctx, request, params)
	return res, err
}

func (c *Client) sendCreateCampaign(ctx context.Context, request *CampaignCreate, params CreateCampaignParams) (res CreateCampaignRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/advertisers/"
	{
		// Encode "advertiserId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "advertiserId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.AdvertiserId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/campaigns"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeCreateCampaignRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeCreateCampaignResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteCampaign invokes deleteCampaign operation.
//
// Удаляет рекламную кампанию рекламодателя по
// заданному campaignId.
//
// DELETE /advertisers/{advertiserId}/campaigns/{campaignId}
func (c *Client) DeleteCampaign(ctx context.Context, params DeleteCampaignParams) (DeleteCampaignRes, error) {
	res, err := c.sendDeleteCampaign(ctx, params)
	return res, err
}

func (c *Client) sendDeleteCampaign(ctx context.Context, params DeleteCampaignParams) (res DeleteCampaignRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/advertisers/"
	{
		// Encode "advertiserId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "advertiserId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.AdvertiserId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/campaigns/"
	{
		// Encode "campaignId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "campaignId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.CampaignId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteCampaignResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GenerateAdText invokes generateAdText operation.
//
// Генерирует текст рекламного объявления.
//
// POST /ai/generate-ad-text
func (c *Client) GenerateAdText(ctx context.Context, request *GenerateAdTextReq) (GenerateAdTextRes, error) {
	res, err := c.sendGenerateAdText(ctx, request)
	return res, err
}

func (c *Client) sendGenerateAdText(ctx context.Context, request *GenerateAdTextReq) (res GenerateAdTextRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/ai/generate-ad-text"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeGenerateAdTextRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGenerateAdTextResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAdForClient invokes getAdForClient operation.
//
// Возвращает рекламное объявление, подходящее для
// показа клиенту с учетом таргетинга и ML скора.
//
// GET /ads
func (c *Client) GetAdForClient(ctx context.Context, params GetAdForClientParams) (GetAdForClientRes, error) {
	res, err := c.sendGetAdForClient(ctx, params)
	return res, err
}

func (c *Client) sendGetAdForClient(ctx context.Context, params GetAdForClientParams) (res GetAdForClientRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/ads"
	uri.AddPathParts(u, pathParts[:]...)

	q := uri.NewQueryEncoder()
	{
		// Encode "client_id" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "client_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.UUIDToString(params.ClientID))
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	u.RawQuery = q.Values().Encode()

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAdForClientResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAdvertiserById invokes getAdvertiserById operation.
//
// Возвращает информацию о рекламодателе по его ID.
//
// GET /advertisers/{advertiserId}
func (c *Client) GetAdvertiserById(ctx context.Context, params GetAdvertiserByIdParams) (GetAdvertiserByIdRes, error) {
	res, err := c.sendGetAdvertiserById(ctx, params)
	return res, err
}

func (c *Client) sendGetAdvertiserById(ctx context.Context, params GetAdvertiserByIdParams) (res GetAdvertiserByIdRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/advertisers/"
	{
		// Encode "advertiserId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "advertiserId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.AdvertiserId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAdvertiserByIdResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAdvertiserCampaignsStats invokes getAdvertiserCampaignsStats operation.
//
// Возвращает сводную статистику по всем рекламным
// кампаниям, принадлежащим заданному рекламодателю.
//
// GET /stats/advertisers/{advertiserId}/campaigns
func (c *Client) GetAdvertiserCampaignsStats(ctx context.Context, params GetAdvertiserCampaignsStatsParams) (GetAdvertiserCampaignsStatsRes, error) {
	res, err := c.sendGetAdvertiserCampaignsStats(ctx, params)
	return res, err
}

func (c *Client) sendGetAdvertiserCampaignsStats(ctx context.Context, params GetAdvertiserCampaignsStatsParams) (res GetAdvertiserCampaignsStatsRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/stats/advertisers/"
	{
		// Encode "advertiserId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "advertiserId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.AdvertiserId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/campaigns"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAdvertiserCampaignsStatsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAdvertiserDailyStats invokes getAdvertiserDailyStats operation.
//
// Возвращает массив ежедневной сводной статистики по
// всем рекламным кампаниям заданного рекламодателя.
//
// GET /stats/advertisers/{advertiserId}/campaigns/daily
func (c *Client) GetAdvertiserDailyStats(ctx context.Context, params GetAdvertiserDailyStatsParams) (GetAdvertiserDailyStatsRes, error) {
	res, err := c.sendGetAdvertiserDailyStats(ctx, params)
	return res, err
}

func (c *Client) sendGetAdvertiserDailyStats(ctx context.Context, params GetAdvertiserDailyStatsParams) (res GetAdvertiserDailyStatsRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/stats/advertisers/"
	{
		// Encode "advertiserId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "advertiserId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.AdvertiserId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/campaigns/daily"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetAdvertiserDailyStatsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetCampaign invokes getCampaign operation.
//
// Получение кампании по ID.
//
// GET /advertisers/{advertiserId}/campaigns/{campaignId}
func (c *Client) GetCampaign(ctx context.Context, params GetCampaignParams) (GetCampaignRes, error) {
	res, err := c.sendGetCampaign(ctx, params)
	return res, err
}

func (c *Client) sendGetCampaign(ctx context.Context, params GetCampaignParams) (res GetCampaignRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/advertisers/"
	{
		// Encode "advertiserId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "advertiserId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.AdvertiserId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/campaigns/"
	{
		// Encode "campaignId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "campaignId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.CampaignId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetCampaignResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetCampaignDailyStats invokes getCampaignDailyStats operation.
//
// Возвращает массив ежедневной статистики для
// указанной рекламной кампании.
//
// GET /stats/campaigns/{campaignId}/daily
func (c *Client) GetCampaignDailyStats(ctx context.Context, params GetCampaignDailyStatsParams) (GetCampaignDailyStatsRes, error) {
	res, err := c.sendGetCampaignDailyStats(ctx, params)
	return res, err
}

func (c *Client) sendGetCampaignDailyStats(ctx context.Context, params GetCampaignDailyStatsParams) (res GetCampaignDailyStatsRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/stats/campaigns/"
	{
		// Encode "campaignId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "campaignId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.CampaignId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/daily"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetCampaignDailyStatsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetCampaignStats invokes getCampaignStats operation.
//
// Возвращает агрегированную статистику (показы,
// переходы, затраты и конверсию) для заданной рекламной
// кампании.
//
// GET /stats/campaigns/{campaignId}
func (c *Client) GetCampaignStats(ctx context.Context, params GetCampaignStatsParams) (GetCampaignStatsRes, error) {
	res, err := c.sendGetCampaignStats(ctx, params)
	return res, err
}

func (c *Client) sendGetCampaignStats(ctx context.Context, params GetCampaignStatsParams) (res GetCampaignStatsRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/stats/campaigns/"
	{
		// Encode "campaignId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "campaignId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.CampaignId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetCampaignStatsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetClientById invokes getClientById operation.
//
// Возвращает информацию о клиенте по его ID.
//
// GET /clients/{clientId}
func (c *Client) GetClientById(ctx context.Context, params GetClientByIdParams) (GetClientByIdRes, error) {
	res, err := c.sendGetClientById(ctx, params)
	return res, err
}

func (c *Client) sendGetClientById(ctx context.Context, params GetClientByIdParams) (res GetClientByIdRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/clients/"
	{
		// Encode "clientId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "clientId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.ClientId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetClientByIdResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// ListCampaigns invokes listCampaigns operation.
//
// Возвращает список рекламных кампаний для указанного
// рекламодателя с пагинацией.
//
// GET /advertisers/{advertiserId}/campaigns
func (c *Client) ListCampaigns(ctx context.Context, params ListCampaignsParams) (ListCampaignsRes, error) {
	res, err := c.sendListCampaigns(ctx, params)
	return res, err
}

func (c *Client) sendListCampaigns(ctx context.Context, params ListCampaignsParams) (res ListCampaignsRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/advertisers/"
	{
		// Encode "advertiserId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "advertiserId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.AdvertiserId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/campaigns"
	uri.AddPathParts(u, pathParts[:]...)

	q := uri.NewQueryEncoder()
	{
		// Encode "size" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "size",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := params.Size.Get(); ok {
				return e.EncodeValue(conv.IntToString(val))
			}
			return nil
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	{
		// Encode "page" parameter.
		cfg := uri.QueryParameterEncodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.EncodeParam(cfg, func(e uri.Encoder) error {
			if val, ok := params.Page.Get(); ok {
				return e.EncodeValue(conv.IntToString(val))
			}
			return nil
		}); err != nil {
			return res, errors.Wrap(err, "encode query")
		}
	}
	u.RawQuery = q.Values().Encode()

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeListCampaignsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// ModerateAdText invokes moderateAdText operation.
//
// Модерирует текст рекламного объявления.
//
// POST /ai/moderate-ad-text
func (c *Client) ModerateAdText(ctx context.Context, request *ModerateAdTextReq) (ModerateAdTextRes, error) {
	res, err := c.sendModerateAdText(ctx, request)
	return res, err
}

func (c *Client) sendModerateAdText(ctx context.Context, request *ModerateAdTextReq) (res ModerateAdTextRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/ai/moderate-ad-text"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeModerateAdTextRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeModerateAdTextResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// RecordAdClick invokes recordAdClick operation.
//
// Фиксирует клик (переход) клиента по рекламному
// объявлению.
//
// POST /ads/{adId}/click
func (c *Client) RecordAdClick(ctx context.Context, request *RecordAdClickReq, params RecordAdClickParams) (RecordAdClickRes, error) {
	res, err := c.sendRecordAdClick(ctx, request, params)
	return res, err
}

func (c *Client) sendRecordAdClick(ctx context.Context, request *RecordAdClickReq, params RecordAdClickParams) (res RecordAdClickRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/ads/"
	{
		// Encode "adId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "adId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.AdId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/click"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeRecordAdClickRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeRecordAdClickResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UpdateCampaign invokes updateCampaign operation.
//
// Обновляет разрешённые параметры рекламной кампании
// до её старта.
//
// PUT /advertisers/{advertiserId}/campaigns/{campaignId}
func (c *Client) UpdateCampaign(ctx context.Context, request *CampaignUpdate, params UpdateCampaignParams) (UpdateCampaignRes, error) {
	res, err := c.sendUpdateCampaign(ctx, request, params)
	return res, err
}

func (c *Client) sendUpdateCampaign(ctx context.Context, request *CampaignUpdate, params UpdateCampaignParams) (res UpdateCampaignRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [4]string
	pathParts[0] = "/advertisers/"
	{
		// Encode "advertiserId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "advertiserId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.AdvertiserId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/campaigns/"
	{
		// Encode "campaignId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "campaignId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.CampaignId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeUpdateCampaignRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUpdateCampaignResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UploadCampaignImage invokes uploadCampaignImage operation.
//
// Загружает изображение рекламного объявления. Если не
// передать изображение, то прежнее удалится.
//
// PUT /advertisers/{advertiserId}/campaigns/{campaignId}/image
func (c *Client) UploadCampaignImage(ctx context.Context, request UploadCampaignImageReq, params UploadCampaignImageParams) (UploadCampaignImageRes, error) {
	res, err := c.sendUploadCampaignImage(ctx, request, params)
	return res, err
}

func (c *Client) sendUploadCampaignImage(ctx context.Context, request UploadCampaignImageReq, params UploadCampaignImageParams) (res UploadCampaignImageRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [5]string
	pathParts[0] = "/advertisers/"
	{
		// Encode "advertiserId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "advertiserId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.AdvertiserId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/campaigns/"
	{
		// Encode "campaignId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "campaignId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.CampaignId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[3] = encoded
	}
	pathParts[4] = "/image"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeUploadCampaignImageRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUploadCampaignImageResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UpsertAdvertisers invokes upsertAdvertisers operation.
//
// Создаёт новых или обновляет существующих
// рекламодателей.
//
// POST /advertisers/bulk
func (c *Client) UpsertAdvertisers(ctx context.Context, request []AdvertiserUpsert) (UpsertAdvertisersRes, error) {
	res, err := c.sendUpsertAdvertisers(ctx, request)
	return res, err
}

func (c *Client) sendUpsertAdvertisers(ctx context.Context, request []AdvertiserUpsert) (res UpsertAdvertisersRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/advertisers/bulk"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeUpsertAdvertisersRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUpsertAdvertisersResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UpsertClients invokes upsertClients operation.
//
// Создаёт новых или обновляет существующих клиентов.
//
// POST /clients/bulk
func (c *Client) UpsertClients(ctx context.Context, request []ClientUpsert) (UpsertClientsRes, error) {
	res, err := c.sendUpsertClients(ctx, request)
	return res, err
}

func (c *Client) sendUpsertClients(ctx context.Context, request []ClientUpsert) (res UpsertClientsRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/clients/bulk"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeUpsertClientsRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUpsertClientsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UpsertMLScore invokes upsertMLScore operation.
//
// Добавляет или обновляет ML скор для указанной пары
// клиент-рекламодатель.
//
// POST /ml-scores
func (c *Client) UpsertMLScore(ctx context.Context, request *MLScore) (UpsertMLScoreRes, error) {
	res, err := c.sendUpsertMLScore(ctx, request)
	return res, err
}

func (c *Client) sendUpsertMLScore(ctx context.Context, request *MLScore) (res UpsertMLScoreRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/ml-scores"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeUpsertMLScoreRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUpsertMLScoreResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}
