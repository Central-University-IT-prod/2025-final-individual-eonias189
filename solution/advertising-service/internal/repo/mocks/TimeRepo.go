// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TimeRepo is an autogenerated mock type for the TimeRepo type
type TimeRepo struct {
	mock.Mock
}

// GetDay provides a mock function with given fields: ctx
func (_m *TimeRepo) GetDay(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetDay")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetDay provides a mock function with given fields: ctx, date
func (_m *TimeRepo) SetDay(ctx context.Context, date int) error {
	ret := _m.Called(ctx, date)

	if len(ret) == 0 {
		panic("no return value specified for SetDay")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, date)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTimeRepo creates a new instance of TimeRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTimeRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *TimeRepo {
	mock := &TimeRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
