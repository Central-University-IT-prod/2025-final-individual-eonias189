version: "3"

services:
  advertising-service:
    build:
      context: .
      dockerfile: docker/advertising-service.Dockerfile
    environment:
      - LOG_LEVEL=debug
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_USER=${MINIO_USER}
      - MINIO_PASSWORD=${MINIO_PASSWORD}
      - MINIO_STATIC_BUCKET=${MINIO_STATIC_BUCKET}
      - STATIC_BASE_URL=http://localhost:8080/static
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_BASE_URL=https://openrouter.ai/api/v1
      - OPENAI_MODEL=deepseek/deepseek-chat:free
    depends_on:
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      createbucket:
        condition: service_completed_successfully
    ports:
      - 8080:8080
  postgres:
    image: postgres:16.6-alpine
    container_name: postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - 5432:5432
  migrate:
    image: migrate/migrate
    container_name: migrate
    volumes:
      - ./advertising-service/migrations:/migrations
    entrypoint: >
      migrate -path /migrations -database "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable" up
    depends_on:
      postgres:
        condition: service_healthy

  redis:
    image: redis:7.4-alpine
    container_name: redis
    volumes:
      - redis_data:/data
    healthcheck:
      test: redis-cli ping | grep PONG
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - 6379:6379

  minio:
    image: quay.io/minio/minio
    container_name: minio
    environment:
      - MINIO_ROOT_USER=${MINIO_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_PASSWORD}
    volumes:
      - minio_data:/data
    ports:
      - 9000:9000
    healthcheck:
      test: mc ready local
      interval: 5s
      timeout: 5s
      retries: 5
    command: ["server", "/data"]

  createbucket:
    image: minio/mc
    container_name: createbucket
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      sh -c '
        mc alias set local http://minio:9000 ${MINIO_USER} ${MINIO_PASSWORD} &&
        mc mb local/${MINIO_STATIC_BUCKET} -p
      '

  grafana:
    image: grafana/grafana
    container_name: grafana
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/dashboards
    ports:
      - 3000:3000

volumes:
  postgres_data:
  redis_data:
  minio_data:
  grafana_data:
