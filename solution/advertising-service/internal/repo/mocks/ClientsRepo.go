// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	models "advertising/advertising-service/internal/models"
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ClientsRepo is an autogenerated mock type for the ClientsRepo type
type ClientsRepo struct {
	mock.Mock
}

// GetClientById provides a mock function with given fields: ctx, id
func (_m *ClientsRepo) GetClientById(ctx context.Context, id uuid.UUID) (models.Client, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetClientById")
	}

	var r0 models.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (models.Client, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) models.Client); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Client)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertClients provides a mock function with given fields: ctx, clients
func (_m *ClientsRepo) UpsertClients(ctx context.Context, clients []models.Client) ([]models.Client, error) {
	ret := _m.Called(ctx, clients)

	if len(ret) == 0 {
		panic("no return value specified for UpsertClients")
	}

	var r0 []models.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Client) ([]models.Client, error)); ok {
		return rf(ctx, clients)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []models.Client) []models.Client); ok {
		r0 = rf(ctx, clients)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []models.Client) error); ok {
		r1 = rf(ctx, clients)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClientsRepo creates a new instance of ClientsRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientsRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientsRepo {
	mock := &ClientsRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
