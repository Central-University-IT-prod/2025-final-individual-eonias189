// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	models "advertising/advertising-service/internal/models"
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ClientActionsRepo is an autogenerated mock type for the ClientActionsRepo type
type ClientActionsRepo struct {
	mock.Mock
}

// CheckImpressed provides a mock function with given fields: ctx, clientId, campaignId
func (_m *ClientActionsRepo) CheckImpressed(ctx context.Context, clientId uuid.UUID, campaignId uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, clientId, campaignId)

	if len(ret) == 0 {
		panic("no return value specified for CheckImpressed")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (bool, error)); ok {
		return rf(ctx, clientId, campaignId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(ctx, clientId, campaignId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, clientId, campaignId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecordClick provides a mock function with given fields: ctx, click
func (_m *ClientActionsRepo) RecordClick(ctx context.Context, click models.Click) error {
	ret := _m.Called(ctx, click)

	if len(ret) == 0 {
		panic("no return value specified for RecordClick")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Click) error); ok {
		r0 = rf(ctx, click)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RecordImpression provides a mock function with given fields: ctx, impression
func (_m *ClientActionsRepo) RecordImpression(ctx context.Context, impression models.Impression) error {
	ret := _m.Called(ctx, impression)

	if len(ret) == 0 {
		panic("no return value specified for RecordImpression")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Impression) error); ok {
		r0 = rf(ctx, impression)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewClientActionsRepo creates a new instance of ClientActionsRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientActionsRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientActionsRepo {
	mock := &ClientActionsRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
