// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	models "advertising/advertising-service/internal/models"
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// AdvertisersRepo is an autogenerated mock type for the AdvertisersRepo type
type AdvertisersRepo struct {
	mock.Mock
}

// GetAdvertiserById provides a mock function with given fields: ctx, id
func (_m *AdvertisersRepo) GetAdvertiserById(ctx context.Context, id uuid.UUID) (models.Advertiser, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAdvertiserById")
	}

	var r0 models.Advertiser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (models.Advertiser, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) models.Advertiser); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Advertiser)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertAdvertisers provides a mock function with given fields: ctx, advertisers
func (_m *AdvertisersRepo) UpsertAdvertisers(ctx context.Context, advertisers []models.Advertiser) ([]models.Advertiser, error) {
	ret := _m.Called(ctx, advertisers)

	if len(ret) == 0 {
		panic("no return value specified for UpsertAdvertisers")
	}

	var r0 []models.Advertiser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Advertiser) ([]models.Advertiser, error)); ok {
		return rf(ctx, advertisers)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []models.Advertiser) []models.Advertiser); ok {
		r0 = rf(ctx, advertisers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Advertiser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []models.Advertiser) error); ok {
		r1 = rf(ctx, advertisers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAdvertisersRepo creates a new instance of AdvertisersRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdvertisersRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdvertisersRepo {
	mock := &AdvertisersRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
